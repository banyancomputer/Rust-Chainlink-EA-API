{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0","program":"/Users/zevkent/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","rust_decimal","--edition=2021","/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=574f1cb350082716","-C","extra-filename=-574f1cb350082716","--out-dir","/Users/zevkent/Rust-Chainlink-EA-API/target/rls/debug/deps","-L","dependency=/Users/zevkent/Rust-Chainlink-EA-API/target/rls/debug/deps","--extern","arrayvec=/Users/zevkent/Rust-Chainlink-EA-API/target/rls/debug/deps/libarrayvec-1f1c29fe2474bab0.rmeta","--extern","num_traits=/Users/zevkent/Rust-Chainlink-EA-API/target/rls/debug/deps/libnum_traits-5a870d734e90a107.rmeta","--extern","serde=/Users/zevkent/Rust-Chainlink-EA-API/target/rls/debug/deps/libserde-8717b02771447baa.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/zevkent/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/zevkent/Rust-Chainlink-EA-API/target/rls/debug/deps/librust_decimal-574f1cb350082716.rmeta"},"prelude":{"crate_id":{"name":"rust_decimal","disambiguator":[9504974184073486180,0]},"crate_root":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src","external_crates":[{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10021291131669744914,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","num":2,"id":{"name":"core","disambiguator":[10014640881818692046,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15800718316297612287,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6961639640463363723,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15443605689848621,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16699447446517724675,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7072391781806093942,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4396878825326251599,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[8751207805142453879,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1923978614408483767,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[14411112285710781992,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[2356975140922920692,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[17423446140748502282,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[9260941638389817344,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[7858856860374224051,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[4855109919914642709,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[15652019722635755907,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[5018606611167862631,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[532173890138877460,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","num":20,"id":{"name":"num_traits","disambiguator":[9607812822631374760,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/str.rs","num":21,"id":{"name":"arrayvec","disambiguator":[17585455270800231936,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/serde.rs","num":22,"id":{"name":"serde","disambiguator":[1378058748385437960,0]}},{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/serde.rs","num":23,"id":{"name":"serde_derive","disambiguator":[15017880620404699729,0]}}],"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":0,"byte_end":1832,"line_start":1,"line_end":71,"column_start":1,"column_end":53}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1034},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1142,"byte_end":1149,"line_start":51,"line_end":51,"column_start":19,"column_end":26},"alias_span":null,"name":"Decimal","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1042},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1151,"byte_end":1167,"line_start":51,"line_end":51,"column_start":28,"column_end":44},"alias_span":null,"name":"RoundingStrategy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1168},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1185,"byte_end":1190,"line_start":52,"line_end":52,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1034},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1451,"byte_end":1458,"line_start":60,"line_end":60,"column_start":21,"column_end":28},"alias_span":null,"name":"Decimal","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":0,"index":1042},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1460,"byte_end":1476,"line_start":60,"line_end":60,"column_start":30,"column_end":46},"alias_span":null,"name":"RoundingStrategy","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":2,"index":12556},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1502,"byte_end":1509,"line_start":61,"line_end":61,"column_start":24,"column_end":31},"alias_span":null,"name":"FromStr","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":20,"index":333},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1536,"byte_end":1549,"line_start":62,"line_end":62,"column_start":26,"column_end":39},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":20,"index":476},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1551,"byte_end":1554,"line_start":62,"line_end":62,"column_start":41,"column_end":44},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":20,"index":819},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1556,"byte_end":1562,"line_start":62,"line_end":62,"column_start":46,"column_end":52},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":20,"index":307},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1564,"byte_end":1575,"line_start":62,"line_end":62,"column_start":54,"column_end":65},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":990}},{"kind":"Use","ref_id":{"krate":20,"index":466},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1577,"byte_end":1581,"line_start":62,"line_end":62,"column_start":67,"column_end":71},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":990}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":0,"byte_end":1832,"line_start":1,"line_end":71,"column_start":1,"column_end":53},"name":"","qualname":"::","value":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":27},{"krate":0,"index":360},{"krate":0,"index":381},{"krate":0,"index":689},{"krate":0,"index":840},{"krate":0,"index":932},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":1017}],"decl_id":null,"docs":"A Decimal number implementation written in pure Rust suitable for financial calculations that require significant integral and fractional digits with no round-off errors.","sig":null,"attributes":[{"value":"forbid(unsafe_code)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":67,"byte_end":90,"line_start":2,"line_end":2,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1019},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":6452,"byte_end":6467,"line_start":89,"line_end":89,"column_start":12,"column_end":27},"name":"UnpackedDecimal","qualname":"::decimal::UnpackedDecimal","value":"UnpackedDecimal { negative, scale, hi, mid, lo }","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024}],"decl_id":null,"docs":" `UnpackedDecimal` contains unpacked representation of `Decimal` where each component\n of decimal-format stored in it's own field\n","sig":null,"attributes":[{"value":"/ `UnpackedDecimal` contains unpacked representation of `Decimal` where each component","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":6264,"byte_end":6352,"line_start":86,"line_end":86,"column_start":1,"column_end":89}},{"value":"/ of decimal-format stored in it's own field","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":6353,"byte_end":6399,"line_start":87,"line_end":87,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1020},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":6478,"byte_end":6486,"line_start":90,"line_end":90,"column_start":9,"column_end":17},"name":"negative","qualname":"::decimal::UnpackedDecimal::negative","value":"bool","parent":{"krate":0,"index":1019},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1021},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":6502,"byte_end":6507,"line_start":91,"line_end":91,"column_start":9,"column_end":14},"name":"scale","qualname":"::decimal::UnpackedDecimal::scale","value":"u32","parent":{"krate":0,"index":1019},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1022},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":6522,"byte_end":6524,"line_start":92,"line_end":92,"column_start":9,"column_end":11},"name":"hi","qualname":"::decimal::UnpackedDecimal::hi","value":"u32","parent":{"krate":0,"index":1019},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1023},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":6539,"byte_end":6542,"line_start":93,"line_end":93,"column_start":9,"column_end":12},"name":"mid","qualname":"::decimal::UnpackedDecimal::mid","value":"u32","parent":{"krate":0,"index":1019},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1024},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":6557,"byte_end":6559,"line_start":94,"line_end":94,"column_start":9,"column_end":11},"name":"lo","qualname":"::decimal::UnpackedDecimal::lo","value":"u32","parent":{"krate":0,"index":1019},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1034},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":7361,"byte_end":7368,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"Decimal","qualname":"::decimal::Decimal","value":"Decimal {  }","parent":null,"children":[{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038}],"decl_id":null,"docs":" `Decimal` represents a 128 bit representation of a fixed-precision decimal number.\n The finite set of values of type `Decimal` are of the form m / 10<sup>e</sup>,\n where m is an integer such that -2<sup>96</sup> < m < 2<sup>96</sup>, and e is an integer\n between 0 and 28 inclusive.\n","sig":null,"attributes":[{"value":"/ `Decimal` represents a 128 bit representation of a fixed-precision decimal number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":6569,"byte_end":6655,"line_start":97,"line_end":97,"column_start":1,"column_end":87}},{"value":"/ The finite set of values of type `Decimal` are of the form m / 10<sup>e</sup>,","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":6656,"byte_end":6738,"line_start":98,"line_end":98,"column_start":1,"column_end":83}},{"value":"/ where m is an integer such that -2<sup>96</sup> < m < 2<sup>96</sup>, and e is an integer","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":6739,"byte_end":6832,"line_start":99,"line_end":99,"column_start":1,"column_end":94}},{"value":"/ between 0 and 28 inclusive.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":6833,"byte_end":6864,"line_start":100,"line_end":100,"column_start":1,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1043},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8142,"byte_end":8161,"line_start":136,"line_end":136,"column_start":5,"column_end":24},"name":"MidpointNearestEven","qualname":"::decimal::RoundingStrategy::MidpointNearestEven","value":"RoundingStrategy::MidpointNearestEven","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" When a number is halfway between two others, it is rounded toward the nearest even number.\n Also known as \"Bankers Rounding\".\n e.g.\n 6.5 -> 6, 7.5 -> 8\n","sig":null,"attributes":[{"value":"/ When a number is halfway between two others, it is rounded toward the nearest even number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":7961,"byte_end":8055,"line_start":132,"line_end":132,"column_start":5,"column_end":99}},{"value":"/ Also known as \"Bankers Rounding\".","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8060,"byte_end":8097,"line_start":133,"line_end":133,"column_start":5,"column_end":42}},{"value":"/ e.g.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8102,"byte_end":8110,"line_start":134,"line_end":134,"column_start":5,"column_end":13}},{"value":"/ 6.5 -> 6, 7.5 -> 8","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8115,"byte_end":8137,"line_start":135,"line_end":135,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1045},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8328,"byte_end":8348,"line_start":139,"line_end":139,"column_start":5,"column_end":25},"name":"MidpointAwayFromZero","qualname":"::decimal::RoundingStrategy::MidpointAwayFromZero","value":"RoundingStrategy::MidpointAwayFromZero","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" When a number is halfway between two others, it is rounded toward the nearest number that\n is away from zero. e.g. 6.4 -> 6, 6.5 -> 7, -6.5 -> -7\n","sig":null,"attributes":[{"value":"/ When a number is halfway between two others, it is rounded toward the nearest number that","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8167,"byte_end":8260,"line_start":137,"line_end":137,"column_start":5,"column_end":98}},{"value":"/ is away from zero. e.g. 6.4 -> 6, 6.5 -> 7, -6.5 -> -7","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8265,"byte_end":8323,"line_start":138,"line_end":138,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1047},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8512,"byte_end":8530,"line_start":142,"line_end":142,"column_start":5,"column_end":23},"name":"MidpointTowardZero","qualname":"::decimal::RoundingStrategy::MidpointTowardZero","value":"RoundingStrategy::MidpointTowardZero","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" When a number is halfway between two others, it is rounded toward the nearest number that\n is toward zero. e.g. 6.4 -> 6, 6.5 -> 6, -6.5 -> -6\n","sig":null,"attributes":[{"value":"/ When a number is halfway between two others, it is rounded toward the nearest number that","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8354,"byte_end":8447,"line_start":140,"line_end":140,"column_start":5,"column_end":98}},{"value":"/ is toward zero. e.g. 6.4 -> 6, 6.5 -> 6, -6.5 -> -6","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8452,"byte_end":8507,"line_start":141,"line_end":141,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1049},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8612,"byte_end":8618,"line_start":144,"line_end":144,"column_start":5,"column_end":11},"name":"ToZero","qualname":"::decimal::RoundingStrategy::ToZero","value":"RoundingStrategy::ToZero","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" The number is always rounded toward zero. e.g. -6.8 -> -6, 6.8 -> 6\n","sig":null,"attributes":[{"value":"/ The number is always rounded toward zero. e.g. -6.8 -> -6, 6.8 -> 6","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8536,"byte_end":8607,"line_start":143,"line_end":143,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1051},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8703,"byte_end":8715,"line_start":146,"line_end":146,"column_start":5,"column_end":17},"name":"AwayFromZero","qualname":"::decimal::RoundingStrategy::AwayFromZero","value":"RoundingStrategy::AwayFromZero","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" The number is always rounded away from zero. e.g. -6.8 -> -7, 6.8 -> 7\n","sig":null,"attributes":[{"value":"/ The number is always rounded away from zero. e.g. -6.8 -> -7, 6.8 -> 7","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8624,"byte_end":8698,"line_start":145,"line_end":145,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1053},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8811,"byte_end":8829,"line_start":148,"line_end":148,"column_start":5,"column_end":23},"name":"ToNegativeInfinity","qualname":"::decimal::RoundingStrategy::ToNegativeInfinity","value":"RoundingStrategy::ToNegativeInfinity","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" The number is always rounded towards negative infinity. e.g. 6.8 -> 6, -6.8 -> -7\n","sig":null,"attributes":[{"value":"/ The number is always rounded towards negative infinity. e.g. 6.8 -> 6, -6.8 -> -7","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8721,"byte_end":8806,"line_start":147,"line_end":147,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1055},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8925,"byte_end":8943,"line_start":150,"line_end":150,"column_start":5,"column_end":23},"name":"ToPositiveInfinity","qualname":"::decimal::RoundingStrategy::ToPositiveInfinity","value":"RoundingStrategy::ToPositiveInfinity","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" The number is always rounded towards positive infinity. e.g. 6.8 -> 7, -6.8 -> -6\n","sig":null,"attributes":[{"value":"/ The number is always rounded towards positive infinity. e.g. 6.8 -> 7, -6.8 -> -6","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8835,"byte_end":8920,"line_start":149,"line_end":149,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1057},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9192,"byte_end":9207,"line_start":156,"line_end":156,"column_start":5,"column_end":20},"name":"BankersRounding","qualname":"::decimal::RoundingStrategy::BankersRounding","value":"RoundingStrategy::BankersRounding","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" When a number is halfway between two others, it is rounded toward the nearest even number.\n e.g.\n 6.5 -> 6, 7.5 -> 8\n","sig":null,"attributes":[{"value":"/ When a number is halfway between two others, it is rounded toward the nearest even number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":8950,"byte_end":9044,"line_start":152,"line_end":152,"column_start":5,"column_end":99}},{"value":"/ e.g.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9049,"byte_end":9057,"line_start":153,"line_end":153,"column_start":5,"column_end":13}},{"value":"/ 6.5 -> 6, 7.5 -> 8","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9062,"byte_end":9084,"line_start":154,"line_end":154,"column_start":5,"column_end":27}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::MidpointNearestEven instead\")","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9089,"byte_end":9187,"line_start":155,"line_end":155,"column_start":5,"column_end":103}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1059},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9391,"byte_end":9402,"line_start":159,"line_end":159,"column_start":5,"column_end":16},"name":"RoundHalfUp","qualname":"::decimal::RoundingStrategy::RoundHalfUp","value":"RoundingStrategy::RoundHalfUp","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" Rounds up if the value >= 5, otherwise rounds down, e.g. 6.5 -> 7\n","sig":null,"attributes":[{"value":"/ Rounds up if the value >= 5, otherwise rounds down, e.g. 6.5 -> 7","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9213,"byte_end":9282,"line_start":157,"line_end":157,"column_start":5,"column_end":74}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::MidpointAwayFromZero instead\")","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9287,"byte_end":9386,"line_start":158,"line_end":158,"column_start":5,"column_end":104}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1061},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9610,"byte_end":9623,"line_start":162,"line_end":162,"column_start":5,"column_end":18},"name":"RoundHalfDown","qualname":"::decimal::RoundingStrategy::RoundHalfDown","value":"RoundingStrategy::RoundHalfDown","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" Rounds down if the value =< 5, otherwise rounds up, e.g. 6.5 -> 6, 6.51 -> 7 1.4999999 -> 1\n","sig":null,"attributes":[{"value":"/ Rounds down if the value =< 5, otherwise rounds up, e.g. 6.5 -> 6, 6.51 -> 7 1.4999999 -> 1","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9408,"byte_end":9503,"line_start":160,"line_end":160,"column_start":5,"column_end":100}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::MidpointTowardZero instead\")","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9508,"byte_end":9605,"line_start":161,"line_end":161,"column_start":5,"column_end":102}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1063},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9746,"byte_end":9755,"line_start":165,"line_end":165,"column_start":5,"column_end":14},"name":"RoundDown","qualname":"::decimal::RoundingStrategy::RoundDown","value":"RoundingStrategy::RoundDown","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" Always round down.\n","sig":null,"attributes":[{"value":"/ Always round down.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9629,"byte_end":9651,"line_start":163,"line_end":163,"column_start":5,"column_end":27}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::ToZero instead\")","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9656,"byte_end":9741,"line_start":164,"line_end":164,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1065},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9882,"byte_end":9889,"line_start":168,"line_end":168,"column_start":5,"column_end":12},"name":"RoundUp","qualname":"::decimal::RoundingStrategy::RoundUp","value":"RoundingStrategy::RoundUp","parent":{"krate":0,"index":1042},"children":[],"decl_id":null,"docs":" Always round up.\n","sig":null,"attributes":[{"value":"/ Always round up.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9761,"byte_end":9781,"line_start":166,"line_end":166,"column_start":5,"column_end":25}},{"value":"deprecated(since = \"1.11.0\", note =\n\"Please use RoundingStrategy::AwayFromZero instead\")","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9786,"byte_end":9877,"line_start":167,"line_end":167,"column_start":5,"column_end":96}}]},{"kind":"Enum","id":{"krate":0,"index":1042},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":7938,"byte_end":7954,"line_start":131,"line_end":131,"column_start":10,"column_end":26},"name":"RoundingStrategy","qualname":"::decimal::RoundingStrategy","value":"enum RoundingStrategy {\n    MidpointNearestEven,\n    MidpointAwayFromZero,\n    MidpointTowardZero,\n    ToZero,\n    AwayFromZero,\n    ToNegativeInfinity,\n    ToPositiveInfinity,\n    BankersRounding,\n    RoundHalfUp,\n    RoundHalfDown,\n    RoundDown,\n    RoundUp,\n}","parent":null,"children":[{"krate":0,"index":1043},{"krate":0,"index":1045},{"krate":0,"index":1047},{"krate":0,"index":1049},{"krate":0,"index":1051},{"krate":0,"index":1053},{"krate":0,"index":1055},{"krate":0,"index":1057},{"krate":0,"index":1059},{"krate":0,"index":1061},{"krate":0,"index":1063},{"krate":0,"index":1065}],"decl_id":null,"docs":" `RoundingStrategy` represents the different rounding strategies that can be used by\n `round_dp_with_strategy`.\n","sig":null,"attributes":[{"value":"/ `RoundingStrategy` represents the different rounding strategies that can be used by","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":7766,"byte_end":7853,"line_start":128,"line_end":128,"column_start":1,"column_end":88}},{"value":"/ `round_dp_with_strategy`.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":7854,"byte_end":7883,"line_start":129,"line_end":129,"column_start":1,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":150},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10254,"byte_end":10257,"line_start":183,"line_end":183,"column_start":15,"column_end":18},"name":"MIN","qualname":"::decimal::Decimal::MIN","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" The smallest value that can be represented by this decimal type.","sig":null,"attributes":[{"value":"/ The smallest value that can be represented by this decimal type.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9933,"byte_end":10001,"line_start":173,"line_end":173,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10006,"byte_end":10009,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10014,"byte_end":10028,"line_start":175,"line_end":175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10033,"byte_end":10036,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10041,"byte_end":10057,"line_start":177,"line_end":177,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10062,"byte_end":10069,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10074,"byte_end":10106,"line_start":179,"line_end":179,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10111,"byte_end":10146,"line_start":180,"line_end":180,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::MIN, dec!(-79_228_162_514_264_337_593_543_950_335));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10151,"byte_end":10227,"line_start":181,"line_end":181,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10232,"byte_end":10239,"line_start":182,"line_end":182,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":151},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10597,"byte_end":10600,"line_start":194,"line_end":194,"column_start":15,"column_end":18},"name":"MAX","qualname":"::decimal::Decimal::MAX","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" The largest value that can be represented by this decimal type.","sig":null,"attributes":[{"value":"/ The largest value that can be represented by this decimal type.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10278,"byte_end":10345,"line_start":184,"line_end":184,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10350,"byte_end":10353,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10358,"byte_end":10372,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10377,"byte_end":10380,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10385,"byte_end":10401,"line_start":188,"line_end":188,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10406,"byte_end":10413,"line_start":189,"line_end":189,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10418,"byte_end":10450,"line_start":190,"line_end":190,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10455,"byte_end":10490,"line_start":191,"line_end":191,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::MAX, dec!(79_228_162_514_264_337_593_543_950_335));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10495,"byte_end":10570,"line_start":192,"line_end":192,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10575,"byte_end":10582,"line_start":193,"line_end":193,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":152},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10867,"byte_end":10871,"line_start":205,"line_end":205,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::decimal::Decimal::ZERO","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing 0.","sig":null,"attributes":[{"value":"/ A constant representing 0.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10621,"byte_end":10651,"line_start":195,"line_end":195,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10656,"byte_end":10659,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10664,"byte_end":10678,"line_start":197,"line_end":197,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10683,"byte_end":10686,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10691,"byte_end":10707,"line_start":199,"line_end":199,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10712,"byte_end":10719,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10724,"byte_end":10756,"line_start":201,"line_end":201,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10761,"byte_end":10796,"line_start":202,"line_end":202,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::ZERO, dec!(0));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10801,"byte_end":10840,"line_start":203,"line_end":203,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10845,"byte_end":10852,"line_start":204,"line_end":204,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":153},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11138,"byte_end":11141,"line_start":216,"line_end":216,"column_start":15,"column_end":18},"name":"ONE","qualname":"::decimal::Decimal::ONE","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing 1.","sig":null,"attributes":[{"value":"/ A constant representing 1.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10893,"byte_end":10923,"line_start":206,"line_end":206,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10928,"byte_end":10931,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10936,"byte_end":10950,"line_start":208,"line_end":208,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10955,"byte_end":10958,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10963,"byte_end":10979,"line_start":210,"line_end":210,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10984,"byte_end":10991,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":10996,"byte_end":11028,"line_start":212,"line_end":212,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11033,"byte_end":11068,"line_start":213,"line_end":213,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::ONE, dec!(1));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11073,"byte_end":11111,"line_start":214,"line_end":214,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11116,"byte_end":11123,"line_start":215,"line_end":215,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":154},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11418,"byte_end":11430,"line_start":227,"line_end":227,"column_start":15,"column_end":27},"name":"NEGATIVE_ONE","qualname":"::decimal::Decimal::NEGATIVE_ONE","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing -1.","sig":null,"attributes":[{"value":"/ A constant representing -1.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11162,"byte_end":11193,"line_start":217,"line_end":217,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11198,"byte_end":11201,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11206,"byte_end":11220,"line_start":219,"line_end":219,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11225,"byte_end":11228,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11233,"byte_end":11249,"line_start":221,"line_end":221,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11254,"byte_end":11261,"line_start":222,"line_end":222,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11266,"byte_end":11298,"line_start":223,"line_end":223,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11303,"byte_end":11338,"line_start":224,"line_end":224,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::NEGATIVE_ONE, dec!(-1));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11343,"byte_end":11391,"line_start":225,"line_end":225,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11396,"byte_end":11403,"line_start":226,"line_end":226,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":155},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11705,"byte_end":11708,"line_start":238,"line_end":238,"column_start":15,"column_end":18},"name":"TWO","qualname":"::decimal::Decimal::TWO","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing 2.","sig":null,"attributes":[{"value":"/ A constant representing 2.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11460,"byte_end":11490,"line_start":228,"line_end":228,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11495,"byte_end":11498,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11503,"byte_end":11517,"line_start":230,"line_end":230,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11522,"byte_end":11525,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11530,"byte_end":11546,"line_start":232,"line_end":232,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11551,"byte_end":11558,"line_start":233,"line_end":233,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11563,"byte_end":11595,"line_start":234,"line_end":234,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11600,"byte_end":11635,"line_start":235,"line_end":235,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::TWO, dec!(2));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11640,"byte_end":11678,"line_start":236,"line_end":236,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11683,"byte_end":11690,"line_start":237,"line_end":237,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":156},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11976,"byte_end":11979,"line_start":249,"line_end":249,"column_start":15,"column_end":18},"name":"TEN","qualname":"::decimal::Decimal::TEN","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing 10.","sig":null,"attributes":[{"value":"/ A constant representing 10.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11729,"byte_end":11760,"line_start":239,"line_end":239,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11765,"byte_end":11768,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11773,"byte_end":11787,"line_start":241,"line_end":241,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11792,"byte_end":11795,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11800,"byte_end":11816,"line_start":243,"line_end":243,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11821,"byte_end":11828,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11833,"byte_end":11865,"line_start":245,"line_end":245,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11870,"byte_end":11905,"line_start":246,"line_end":246,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::TEN, dec!(10));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11910,"byte_end":11949,"line_start":247,"line_end":247,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":11954,"byte_end":11961,"line_start":248,"line_end":248,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":157},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12257,"byte_end":12268,"line_start":260,"line_end":260,"column_start":15,"column_end":26},"name":"ONE_HUNDRED","qualname":"::decimal::Decimal::ONE_HUNDRED","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing 100.","sig":null,"attributes":[{"value":"/ A constant representing 100.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12000,"byte_end":12032,"line_start":250,"line_end":250,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12037,"byte_end":12040,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12045,"byte_end":12059,"line_start":252,"line_end":252,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12064,"byte_end":12067,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12072,"byte_end":12088,"line_start":254,"line_end":254,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12093,"byte_end":12100,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12105,"byte_end":12137,"line_start":256,"line_end":256,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12142,"byte_end":12177,"line_start":257,"line_end":257,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::ONE_HUNDRED, dec!(100));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12182,"byte_end":12230,"line_start":258,"line_end":258,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12235,"byte_end":12242,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":158},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12557,"byte_end":12569,"line_start":271,"line_end":271,"column_start":15,"column_end":27},"name":"ONE_THOUSAND","qualname":"::decimal::Decimal::ONE_THOUSAND","value":"Decimal","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" A constant representing 1000.","sig":null,"attributes":[{"value":"/ A constant representing 1000.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12297,"byte_end":12330,"line_start":261,"line_end":261,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12335,"byte_end":12338,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12343,"byte_end":12357,"line_start":263,"line_end":263,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12362,"byte_end":12365,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12370,"byte_end":12386,"line_start":265,"line_end":265,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12391,"byte_end":12398,"line_start":266,"line_end":266,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12403,"byte_end":12435,"line_start":267,"line_end":267,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12440,"byte_end":12475,"line_start":268,"line_end":268,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Decimal::ONE_THOUSAND, dec!(1000));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12480,"byte_end":12530,"line_start":269,"line_end":269,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":12535,"byte_end":12542,"line_start":270,"line_end":270,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16086,"byte_end":16089,"line_start":396,"line_end":396,"column_start":12,"column_end":15},"name":"new","qualname":"<Decimal>::new","value":"fn new(i64, u32) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Decimal` with a 64 bit `m` representation and corresponding `e` scale.","sig":null,"attributes":[{"value":"/ Returns a `Decimal` with a 64 bit `m` representation and corresponding `e` scale.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15508,"byte_end":15593,"line_start":376,"line_end":376,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15598,"byte_end":15601,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15606,"byte_end":15621,"line_start":378,"line_end":378,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15626,"byte_end":15629,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ * `num` - An i64 that represents the `m` portion of the decimal number","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15634,"byte_end":15708,"line_start":380,"line_end":380,"column_start":5,"column_end":79}},{"value":"/ * `scale` - A u32 representing the `e` portion of the decimal number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15713,"byte_end":15786,"line_start":381,"line_end":381,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15791,"byte_end":15794,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15799,"byte_end":15811,"line_start":383,"line_end":383,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15816,"byte_end":15819,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ This function panics if `scale` is > 28.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15824,"byte_end":15868,"line_start":385,"line_end":385,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15873,"byte_end":15876,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15881,"byte_end":15894,"line_start":387,"line_end":387,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15899,"byte_end":15902,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15907,"byte_end":15914,"line_start":389,"line_end":389,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15919,"byte_end":15951,"line_start":390,"line_end":390,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15956,"byte_end":15961,"line_start":391,"line_end":391,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::new(3141, 3);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":15966,"byte_end":16001,"line_start":392,"line_end":392,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(pi.to_string(), \"3.141\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16006,"byte_end":16046,"line_start":393,"line_end":393,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16051,"byte_end":16058,"line_start":394,"line_end":394,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16063,"byte_end":16074,"line_start":395,"line_end":395,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16555,"byte_end":16562,"line_start":413,"line_end":413,"column_start":18,"column_end":25},"name":"try_new","qualname":"<Decimal>::try_new","value":"const fn try_new(i64, u32) -> crate::Result<Decimal>","parent":null,"children":[],"decl_id":null,"docs":" Checked version of `Decimal::new`. Will return `Err` instead of panicking at run-time.","sig":null,"attributes":[{"value":"/ Checked version of `Decimal::new`. Will return `Err` instead of panicking at run-time.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16251,"byte_end":16341,"line_start":403,"line_end":403,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16346,"byte_end":16349,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16354,"byte_end":16367,"line_start":405,"line_end":405,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16372,"byte_end":16375,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16380,"byte_end":16391,"line_start":407,"line_end":407,"column_start":5,"column_end":16}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16396,"byte_end":16428,"line_start":408,"line_end":408,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16433,"byte_end":16438,"line_start":409,"line_end":409,"column_start":5,"column_end":10}},{"value":"/ let max = Decimal::try_new(i64::MAX, u32::MAX);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16443,"byte_end":16494,"line_start":410,"line_end":410,"column_start":5,"column_end":56}},{"value":"/ assert!(max.is_err());","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16499,"byte_end":16525,"line_start":411,"line_end":411,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":16530,"byte_end":16537,"line_start":412,"line_end":412,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17930,"byte_end":17950,"line_start":455,"line_end":455,"column_start":12,"column_end":32},"name":"from_i128_with_scale","qualname":"<Decimal>::from_i128_with_scale","value":"fn from_i128_with_scale(i128, u32) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Decimal` using a 128 bit signed `m` representation and corresponding `e` scale.","sig":null,"attributes":[{"value":"/ Creates a `Decimal` using a 128 bit signed `m` representation and corresponding `e` scale.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17267,"byte_end":17361,"line_start":435,"line_end":435,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17366,"byte_end":17369,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17374,"byte_end":17389,"line_start":437,"line_end":437,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17394,"byte_end":17397,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ * `num` - An i128 that represents the `m` portion of the decimal number","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17402,"byte_end":17477,"line_start":439,"line_end":439,"column_start":5,"column_end":80}},{"value":"/ * `scale` - A u32 representing the `e` portion of the decimal number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17482,"byte_end":17555,"line_start":440,"line_end":440,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17560,"byte_end":17563,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17568,"byte_end":17580,"line_start":442,"line_end":442,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17585,"byte_end":17588,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ This function panics if `scale` is > 28 or if `num` exceeds the maximum supported 96 bits.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17593,"byte_end":17687,"line_start":444,"line_end":444,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17692,"byte_end":17695,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17700,"byte_end":17713,"line_start":446,"line_end":446,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17718,"byte_end":17721,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17726,"byte_end":17737,"line_start":448,"line_end":448,"column_start":5,"column_end":16}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17742,"byte_end":17774,"line_start":449,"line_end":449,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17779,"byte_end":17784,"line_start":450,"line_end":450,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::from_i128_with_scale(3141i128, 3);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17789,"byte_end":17845,"line_start":451,"line_end":451,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(pi.to_string(), \"3.141\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17850,"byte_end":17890,"line_start":452,"line_end":452,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17895,"byte_end":17902,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":17907,"byte_end":17918,"line_start":454,"line_end":454,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":18477,"byte_end":18501,"line_start":473,"line_end":473,"column_start":18,"column_end":42},"name":"try_from_i128_with_scale","qualname":"<Decimal>::try_from_i128_with_scale","value":"const fn try_from_i128_with_scale(i128, u32) -> crate::Result<Decimal>","parent":null,"children":[],"decl_id":null,"docs":" Checked version of `Decimal::from_i128_with_scale`. Will return `Err` instead\n of panicking at run-time.","sig":null,"attributes":[{"value":"/ Checked version of `Decimal::from_i128_with_scale`. Will return `Err` instead","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":18130,"byte_end":18211,"line_start":462,"line_end":462,"column_start":5,"column_end":86}},{"value":"/ of panicking at run-time.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":18216,"byte_end":18245,"line_start":463,"line_end":463,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":18250,"byte_end":18253,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":18258,"byte_end":18271,"line_start":465,"line_end":465,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":18276,"byte_end":18279,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":18284,"byte_end":18295,"line_start":467,"line_end":467,"column_start":5,"column_end":16}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":18300,"byte_end":18332,"line_start":468,"line_end":468,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":18337,"byte_end":18342,"line_start":469,"line_end":469,"column_start":5,"column_end":10}},{"value":"/ let max = Decimal::try_from_i128_with_scale(i128::MAX, u32::MAX);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":18347,"byte_end":18416,"line_start":470,"line_end":470,"column_start":5,"column_end":74}},{"value":"/ assert!(max.is_err());","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":18421,"byte_end":18447,"line_start":471,"line_end":471,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":18452,"byte_end":18459,"line_start":472,"line_end":472,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":20407,"byte_end":20417,"line_start":522,"line_end":522,"column_start":18,"column_end":28},"name":"from_parts","qualname":"<Decimal>::from_parts","value":"const fn from_parts(u32, u32, u32, bool, u32) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Decimal` using the instances constituent parts.","sig":null,"attributes":[{"value":"/ Returns a `Decimal` using the instances constituent parts.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19302,"byte_end":19364,"line_start":496,"line_end":496,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19369,"byte_end":19372,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19377,"byte_end":19392,"line_start":498,"line_end":498,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19397,"byte_end":19400,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ * `lo` - The low 32 bits of a 96-bit integer.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19405,"byte_end":19454,"line_start":500,"line_end":500,"column_start":5,"column_end":54}},{"value":"/ * `mid` - The middle 32 bits of a 96-bit integer.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19459,"byte_end":19512,"line_start":501,"line_end":501,"column_start":5,"column_end":58}},{"value":"/ * `hi` - The high 32 bits of a 96-bit integer.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19517,"byte_end":19567,"line_start":502,"line_end":502,"column_start":5,"column_end":55}},{"value":"/ * `negative` - `true` to indicate a negative number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19572,"byte_end":19628,"line_start":503,"line_end":503,"column_start":5,"column_end":61}},{"value":"/ * `scale` - A power of 10 ranging from 0 to 28.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19633,"byte_end":19684,"line_start":504,"line_end":504,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19689,"byte_end":19692,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ # Caution: Undefined behavior","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19697,"byte_end":19730,"line_start":506,"line_end":506,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19735,"byte_end":19738,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ While a scale greater than 28 can be passed in, it will be automatically capped by this","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19743,"byte_end":19834,"line_start":508,"line_end":508,"column_start":5,"column_end":96}},{"value":"/ function at the maximum precision. The library opts towards this functionality as opposed","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19839,"byte_end":19932,"line_start":509,"line_end":509,"column_start":5,"column_end":98}},{"value":"/ to a panic to ensure that the function can be treated as constant. This may lead to","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":19937,"byte_end":20024,"line_start":510,"line_end":510,"column_start":5,"column_end":92}},{"value":"/ undefined behavior in downstream applications and should be treated with caution.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":20029,"byte_end":20114,"line_start":511,"line_end":511,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":20119,"byte_end":20122,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":20127,"byte_end":20140,"line_start":513,"line_end":513,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":20145,"byte_end":20148,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":20153,"byte_end":20160,"line_start":515,"line_end":515,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":20165,"byte_end":20197,"line_start":516,"line_end":516,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":20202,"byte_end":20207,"line_start":517,"line_end":517,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::from_parts(1102470952, 185874565, 1703060790, false, 28);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":20212,"byte_end":20291,"line_start":518,"line_end":518,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(pi.to_string(), \"3.1415926535897932384626433832\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":20296,"byte_end":20361,"line_start":519,"line_end":519,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":20366,"byte_end":20373,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":20378,"byte_end":20389,"line_start":521,"line_end":521,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21734,"byte_end":21749,"line_start":570,"line_end":570,"column_start":12,"column_end":27},"name":"from_scientific","qualname":"<Decimal>::from_scientific","value":"fn from_scientific(&str) -> Result<Decimal, Error>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Result` which if successful contains the `Decimal` constitution of\n the scientific notation provided by `value`.","sig":null,"attributes":[{"value":"/ Returns a `Result` which if successful contains the `Decimal` constitution of","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21185,"byte_end":21266,"line_start":552,"line_end":552,"column_start":5,"column_end":86}},{"value":"/ the scientific notation provided by `value`.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21271,"byte_end":21319,"line_start":553,"line_end":553,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21324,"byte_end":21327,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21332,"byte_end":21347,"line_start":555,"line_end":555,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21352,"byte_end":21355,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ * `value` - The scientific notation of the `Decimal`.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21360,"byte_end":21417,"line_start":557,"line_end":557,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21422,"byte_end":21425,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21430,"byte_end":21443,"line_start":559,"line_end":559,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21448,"byte_end":21451,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21456,"byte_end":21463,"line_start":561,"line_end":561,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21468,"byte_end":21500,"line_start":562,"line_end":562,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21505,"byte_end":21510,"line_start":563,"line_end":563,"column_start":5,"column_end":10}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21515,"byte_end":21567,"line_start":564,"line_end":564,"column_start":5,"column_end":57}},{"value":"/ let value = Decimal::from_scientific(\"9.7e-7\")?;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21572,"byte_end":21624,"line_start":565,"line_end":565,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(value.to_string(), \"0.00000097\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21629,"byte_end":21677,"line_start":566,"line_end":566,"column_start":5,"column_end":53}},{"value":"/ #     Ok(())","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21682,"byte_end":21698,"line_start":567,"line_end":567,"column_start":5,"column_end":21}},{"value":"/ # }","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21703,"byte_end":21710,"line_start":568,"line_end":568,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":21715,"byte_end":21722,"line_start":569,"line_end":569,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24844,"byte_end":24858,"line_start":650,"line_end":650,"column_start":12,"column_end":26},"name":"from_str_radix","qualname":"<Decimal>::from_str_radix","value":"fn from_str_radix(&str, u32) -> Result<Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a string slice in a given base to a decimal.","sig":null,"attributes":[{"value":"/ Converts a string slice in a given base to a decimal.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24207,"byte_end":24264,"line_start":628,"line_end":628,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24269,"byte_end":24272,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ The string is expected to be an optional + sign followed by digits.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24277,"byte_end":24348,"line_start":630,"line_end":630,"column_start":5,"column_end":76}},{"value":"/ Digits are a subset of these characters, depending on radix, and will return an error if outside","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24353,"byte_end":24453,"line_start":631,"line_end":631,"column_start":5,"column_end":105}},{"value":"/ the expected range:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24458,"byte_end":24481,"line_start":632,"line_end":632,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24486,"byte_end":24489,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ * 0-9","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24494,"byte_end":24503,"line_start":634,"line_end":634,"column_start":5,"column_end":14}},{"value":"/ * a-z","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24508,"byte_end":24517,"line_start":635,"line_end":635,"column_start":5,"column_end":14}},{"value":"/ * A-Z","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24522,"byte_end":24531,"line_start":636,"line_end":636,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24536,"byte_end":24539,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24544,"byte_end":24558,"line_start":638,"line_end":638,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24563,"byte_end":24566,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24571,"byte_end":24587,"line_start":640,"line_end":640,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24592,"byte_end":24595,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24600,"byte_end":24607,"line_start":642,"line_end":642,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24612,"byte_end":24647,"line_start":643,"line_end":643,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24652,"byte_end":24657,"line_start":644,"line_end":644,"column_start":5,"column_end":10}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24662,"byte_end":24714,"line_start":645,"line_end":645,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(Decimal::from_str_radix(\"A\", 16)?.to_string(), \"10\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24719,"byte_end":24787,"line_start":646,"line_end":646,"column_start":5,"column_end":73}},{"value":"/ #     Ok(())","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24792,"byte_end":24808,"line_start":647,"line_end":647,"column_start":5,"column_end":21}},{"value":"/ # }","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24813,"byte_end":24820,"line_start":648,"line_end":648,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":24825,"byte_end":24832,"line_start":649,"line_end":649,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25821,"byte_end":25835,"line_start":676,"line_end":676,"column_start":12,"column_end":26},"name":"from_str_exact","qualname":"<Decimal>::from_str_exact","value":"fn from_str_exact(&str) -> Result<Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string slice into a decimal. If the value underflows and cannot be represented with the\n given scale then this will return an error.","sig":null,"attributes":[{"value":"/ Parses a string slice into a decimal. If the value underflows and cannot be represented with the","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25079,"byte_end":25179,"line_start":658,"line_end":658,"column_start":5,"column_end":105}},{"value":"/ given scale then this will return an error.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25184,"byte_end":25231,"line_start":659,"line_end":659,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25236,"byte_end":25239,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25244,"byte_end":25258,"line_start":661,"line_end":661,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25263,"byte_end":25266,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25271,"byte_end":25287,"line_start":663,"line_end":663,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25292,"byte_end":25295,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25300,"byte_end":25307,"line_start":665,"line_end":665,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25312,"byte_end":25347,"line_start":666,"line_end":666,"column_start":5,"column_end":40}},{"value":"/ # use rust_decimal::Error;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25352,"byte_end":25382,"line_start":667,"line_end":667,"column_start":5,"column_end":35}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25387,"byte_end":25392,"line_start":668,"line_end":668,"column_start":5,"column_end":10}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25397,"byte_end":25449,"line_start":669,"line_end":669,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(Decimal::from_str_exact(\"0.001\")?.to_string(), \"0.001\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25454,"byte_end":25525,"line_start":670,"line_end":670,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(Decimal::from_str_exact(\"0.00000_00000_00000_00000_00000_001\")?.to_string(), \"0.0000000000000000000000000001\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25530,"byte_end":25656,"line_start":671,"line_end":671,"column_start":5,"column_end":131}},{"value":"/ assert_eq!(Decimal::from_str_exact(\"0.00000_00000_00000_00000_00000_0001\"), Err(Error::Underflow));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25661,"byte_end":25764,"line_start":672,"line_end":672,"column_start":5,"column_end":108}},{"value":"/ #     Ok(())","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25769,"byte_end":25785,"line_start":673,"line_end":673,"column_start":5,"column_end":21}},{"value":"/ # }","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25790,"byte_end":25797,"line_start":674,"line_end":674,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25802,"byte_end":25809,"line_start":675,"line_end":675,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26241,"byte_end":26246,"line_start":692,"line_end":692,"column_start":18,"column_end":23},"name":"scale","qualname":"<Decimal>::scale","value":"const fn scale(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the scale of the decimal number, otherwise known as `e`.","sig":null,"attributes":[{"value":"/ Returns the scale of the decimal number, otherwise known as `e`.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":25940,"byte_end":26008,"line_start":680,"line_end":680,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26013,"byte_end":26016,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26021,"byte_end":26034,"line_start":682,"line_end":682,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26039,"byte_end":26042,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26047,"byte_end":26054,"line_start":684,"line_end":684,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26059,"byte_end":26091,"line_start":685,"line_end":685,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26096,"byte_end":26101,"line_start":686,"line_end":686,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::new(1234, 3);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26106,"byte_end":26142,"line_start":687,"line_end":687,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(num.scale(), 3u32);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26147,"byte_end":26181,"line_start":688,"line_end":688,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26186,"byte_end":26193,"line_start":689,"line_end":689,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26198,"byte_end":26207,"line_start":690,"line_end":690,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26212,"byte_end":26223,"line_start":691,"line_end":691,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26680,"byte_end":26688,"line_start":709,"line_end":709,"column_start":18,"column_end":26},"name":"mantissa","qualname":"<Decimal>::mantissa","value":"const fn mantissa(&Self) -> i128","parent":null,"children":[],"decl_id":null,"docs":" Returns the mantissa of the decimal number.","sig":null,"attributes":[{"value":"/ Returns the mantissa of the decimal number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26332,"byte_end":26379,"line_start":696,"line_end":696,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26384,"byte_end":26387,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26392,"byte_end":26405,"line_start":698,"line_end":698,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26410,"byte_end":26413,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26418,"byte_end":26425,"line_start":700,"line_end":700,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26430,"byte_end":26465,"line_start":701,"line_end":701,"column_start":5,"column_end":40}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26470,"byte_end":26503,"line_start":702,"line_end":702,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26508,"byte_end":26511,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ let num = dec!(-1.2345678);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26516,"byte_end":26547,"line_start":704,"line_end":704,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(num.mantissa(), -12345678i128);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26552,"byte_end":26598,"line_start":705,"line_end":705,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(num.scale(), 7);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26603,"byte_end":26634,"line_start":706,"line_end":706,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26639,"byte_end":26646,"line_start":707,"line_end":707,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26651,"byte_end":26662,"line_start":708,"line_end":708,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27177,"byte_end":27184,"line_start":729,"line_end":729,"column_start":18,"column_end":25},"name":"is_zero","qualname":"<Decimal>::is_zero","value":"const fn is_zero(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this Decimal number is equivalent to zero.","sig":null,"attributes":[{"value":"/ Returns true if this Decimal number is equivalent to zero.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26908,"byte_end":26970,"line_start":718,"line_end":718,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26975,"byte_end":26978,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":26983,"byte_end":26996,"line_start":720,"line_end":720,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27001,"byte_end":27004,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27009,"byte_end":27016,"line_start":722,"line_end":722,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27021,"byte_end":27056,"line_start":723,"line_end":723,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27061,"byte_end":27066,"line_start":724,"line_end":724,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::ZERO;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27071,"byte_end":27099,"line_start":725,"line_end":725,"column_start":5,"column_end":33}},{"value":"/ assert!(num.is_zero());","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27104,"byte_end":27131,"line_start":726,"line_end":726,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27136,"byte_end":27143,"line_start":727,"line_end":727,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27148,"byte_end":27159,"line_start":728,"line_end":728,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27750,"byte_end":27758,"line_start":749,"line_end":749,"column_start":12,"column_end":20},"name":"set_sign","qualname":"<Decimal>::set_sign","value":"fn set_sign(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" An optimized method for changing the sign of a decimal number.","sig":null,"attributes":[{"value":"/ An optimized method for changing the sign of a decimal number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27267,"byte_end":27333,"line_start":733,"line_end":733,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27338,"byte_end":27341,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27346,"byte_end":27361,"line_start":735,"line_end":735,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27366,"byte_end":27369,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ * `positive`: true if the resulting decimal should be positive.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27374,"byte_end":27441,"line_start":737,"line_end":737,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27446,"byte_end":27449,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27454,"byte_end":27467,"line_start":739,"line_end":739,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27472,"byte_end":27475,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27480,"byte_end":27487,"line_start":741,"line_end":741,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27492,"byte_end":27524,"line_start":742,"line_end":742,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27529,"byte_end":27534,"line_start":743,"line_end":743,"column_start":5,"column_end":10}},{"value":"/ let mut one = Decimal::ONE;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27539,"byte_end":27570,"line_start":744,"line_end":744,"column_start":5,"column_end":36}},{"value":"/ one.set_sign(false);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27575,"byte_end":27599,"line_start":745,"line_end":745,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(one.to_string(), \"-1\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27604,"byte_end":27642,"line_start":746,"line_end":746,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27647,"byte_end":27654,"line_start":747,"line_end":747,"column_start":5,"column_end":12}},{"value":"deprecated(since = \"1.4.0\", note =\n\"please use `set_sign_positive` instead\")","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27659,"byte_end":27738,"line_start":748,"line_end":748,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28271,"byte_end":28288,"line_start":769,"line_end":769,"column_start":12,"column_end":29},"name":"set_sign_positive","qualname":"<Decimal>::set_sign_positive","value":"fn set_sign_positive(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" An optimized method for changing the sign of a decimal number.","sig":null,"attributes":[{"value":"/ An optimized method for changing the sign of a decimal number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27841,"byte_end":27907,"line_start":753,"line_end":753,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27912,"byte_end":27915,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27920,"byte_end":27935,"line_start":755,"line_end":755,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27940,"byte_end":27943,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ * `positive`: true if the resulting decimal should be positive.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":27948,"byte_end":28015,"line_start":757,"line_end":757,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28020,"byte_end":28023,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28028,"byte_end":28041,"line_start":759,"line_end":759,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28046,"byte_end":28049,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28054,"byte_end":28061,"line_start":761,"line_end":761,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28066,"byte_end":28098,"line_start":762,"line_end":762,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28103,"byte_end":28108,"line_start":763,"line_end":763,"column_start":5,"column_end":10}},{"value":"/ let mut one = Decimal::ONE;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28113,"byte_end":28144,"line_start":764,"line_end":764,"column_start":5,"column_end":36}},{"value":"/ one.set_sign_positive(false);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28149,"byte_end":28182,"line_start":765,"line_end":765,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(one.to_string(), \"-1\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28187,"byte_end":28225,"line_start":766,"line_end":766,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28230,"byte_end":28237,"line_start":767,"line_end":767,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28242,"byte_end":28259,"line_start":768,"line_end":768,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28883,"byte_end":28900,"line_start":793,"line_end":793,"column_start":12,"column_end":29},"name":"set_sign_negative","qualname":"<Decimal>::set_sign_negative","value":"fn set_sign_negative(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" An optimized method for changing the sign of a decimal number.","sig":null,"attributes":[{"value":"/ An optimized method for changing the sign of a decimal number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28454,"byte_end":28520,"line_start":777,"line_end":777,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28525,"byte_end":28528,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28533,"byte_end":28548,"line_start":779,"line_end":779,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28553,"byte_end":28556,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ * `negative`: true if the resulting decimal should be negative.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28561,"byte_end":28628,"line_start":781,"line_end":781,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28633,"byte_end":28636,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28641,"byte_end":28654,"line_start":783,"line_end":783,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28659,"byte_end":28662,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28667,"byte_end":28674,"line_start":785,"line_end":785,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28679,"byte_end":28711,"line_start":786,"line_end":786,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28716,"byte_end":28721,"line_start":787,"line_end":787,"column_start":5,"column_end":10}},{"value":"/ let mut one = Decimal::ONE;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28726,"byte_end":28757,"line_start":788,"line_end":788,"column_start":5,"column_end":36}},{"value":"/ one.set_sign_negative(true);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28762,"byte_end":28794,"line_start":789,"line_end":789,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(one.to_string(), \"-1\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28799,"byte_end":28837,"line_start":790,"line_end":790,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28842,"byte_end":28849,"line_start":791,"line_end":791,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28854,"byte_end":28871,"line_start":792,"line_end":792,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29451,"byte_end":29460,"line_start":815,"line_end":815,"column_start":12,"column_end":21},"name":"set_scale","qualname":"<Decimal>::set_scale","value":"fn set_scale(&mut Self, u32) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" An optimized method for changing the scale of a decimal number.","sig":null,"attributes":[{"value":"/ An optimized method for changing the scale of a decimal number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":28984,"byte_end":29051,"line_start":797,"line_end":797,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29056,"byte_end":29059,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29064,"byte_end":29079,"line_start":799,"line_end":799,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29084,"byte_end":29087,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ * `scale`: the new scale of the number","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29092,"byte_end":29134,"line_start":801,"line_end":801,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29139,"byte_end":29142,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29147,"byte_end":29160,"line_start":803,"line_end":803,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29165,"byte_end":29168,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29173,"byte_end":29180,"line_start":805,"line_end":805,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29185,"byte_end":29217,"line_start":806,"line_end":806,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29222,"byte_end":29227,"line_start":807,"line_end":807,"column_start":5,"column_end":10}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29232,"byte_end":29284,"line_start":808,"line_end":808,"column_start":5,"column_end":57}},{"value":"/ let mut one = Decimal::ONE;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29289,"byte_end":29320,"line_start":809,"line_end":809,"column_start":5,"column_end":36}},{"value":"/ one.set_scale(5)?;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29325,"byte_end":29347,"line_start":810,"line_end":810,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(one.to_string(), \"0.00001\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29352,"byte_end":29395,"line_start":811,"line_end":811,"column_start":5,"column_end":48}},{"value":"/ #    Ok(())","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29400,"byte_end":29415,"line_start":812,"line_end":812,"column_start":5,"column_end":20}},{"value":"/ # }","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29420,"byte_end":29427,"line_start":813,"line_end":813,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29432,"byte_end":29439,"line_start":814,"line_end":814,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":31641,"byte_end":31648,"line_start":866,"line_end":866,"column_start":12,"column_end":19},"name":"rescale","qualname":"<Decimal>::rescale","value":"fn rescale(&mut Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" Modifies the `Decimal` towards the desired scale, attempting to do so without changing the\n underlying number itself.","sig":null,"attributes":[{"value":"/ Modifies the `Decimal` towards the desired scale, attempting to do so without changing the","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29722,"byte_end":29816,"line_start":823,"line_end":823,"column_start":5,"column_end":99}},{"value":"/ underlying number itself.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29821,"byte_end":29850,"line_start":824,"line_end":824,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29855,"byte_end":29858,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ Setting the scale to something less then the current `Decimal`s scale will","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29863,"byte_end":29941,"line_start":826,"line_end":826,"column_start":5,"column_end":83}},{"value":"/ cause the newly created `Decimal` to perform rounding using the `MidpointAwayFromZero` strategy.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":29946,"byte_end":30046,"line_start":827,"line_end":827,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30051,"byte_end":30054,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ Scales greater than the maximum precision that can be represented by `Decimal` will be","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30059,"byte_end":30149,"line_start":829,"line_end":829,"column_start":5,"column_end":95}},{"value":"/ automatically rounded to either `Decimal::MAX_PRECISION` or the maximum precision that can","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30154,"byte_end":30248,"line_start":830,"line_end":830,"column_start":5,"column_end":99}},{"value":"/ be represented with the given mantissa.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30253,"byte_end":30296,"line_start":831,"line_end":831,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30301,"byte_end":30304,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30309,"byte_end":30324,"line_start":833,"line_end":833,"column_start":5,"column_end":20}},{"value":"/ * `scale`: The desired scale to use for the new `Decimal` number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30329,"byte_end":30398,"line_start":834,"line_end":834,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30403,"byte_end":30406,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30411,"byte_end":30424,"line_start":836,"line_end":836,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30429,"byte_end":30432,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30437,"byte_end":30444,"line_start":838,"line_end":838,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30449,"byte_end":30484,"line_start":839,"line_end":839,"column_start":5,"column_end":40}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30489,"byte_end":30522,"line_start":840,"line_end":840,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30527,"byte_end":30530,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ // Rescaling to a higher scale preserves the value","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30535,"byte_end":30589,"line_start":842,"line_end":842,"column_start":5,"column_end":59}},{"value":"/ let mut number = dec!(1.123);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30594,"byte_end":30627,"line_start":843,"line_end":843,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(number.scale(), 3);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30632,"byte_end":30666,"line_start":844,"line_end":844,"column_start":5,"column_end":39}},{"value":"/ number.rescale(6);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30671,"byte_end":30693,"line_start":845,"line_end":845,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(number.to_string(), \"1.123000\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30698,"byte_end":30745,"line_start":846,"line_end":846,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(number.scale(), 6);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30750,"byte_end":30784,"line_start":847,"line_end":847,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30789,"byte_end":30792,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ // Rescaling to a lower scale forces the number to be rounded","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30797,"byte_end":30862,"line_start":849,"line_end":849,"column_start":5,"column_end":70}},{"value":"/ let mut number = dec!(1.45);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30867,"byte_end":30899,"line_start":850,"line_end":850,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(number.scale(), 2);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30904,"byte_end":30938,"line_start":851,"line_end":851,"column_start":5,"column_end":39}},{"value":"/ number.rescale(1);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30943,"byte_end":30965,"line_start":852,"line_end":852,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(number.to_string(), \"1.5\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":30970,"byte_end":31012,"line_start":853,"line_end":853,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(number.scale(), 1);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":31017,"byte_end":31051,"line_start":854,"line_end":854,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":31056,"byte_end":31059,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ // This function never fails. Consequently, if a scale is provided that is unable to be","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":31064,"byte_end":31155,"line_start":856,"line_end":856,"column_start":5,"column_end":96}},{"value":"/ // represented using the given mantissa, then the maximum possible scale is used.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":31160,"byte_end":31245,"line_start":857,"line_end":857,"column_start":5,"column_end":90}},{"value":"/ let mut number = dec!(11.76470588235294);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":31250,"byte_end":31295,"line_start":858,"line_end":858,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(number.scale(), 14);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":31300,"byte_end":31335,"line_start":859,"line_end":859,"column_start":5,"column_end":40}},{"value":"/ number.rescale(28);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":31340,"byte_end":31363,"line_start":860,"line_end":860,"column_start":5,"column_end":28}},{"value":"/ // A scale of 28 cannot be represented given this mantissa, however it was able to represent","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":31368,"byte_end":31464,"line_start":861,"line_end":861,"column_start":5,"column_end":101}},{"value":"/ // a number with a scale of 27","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":31469,"byte_end":31503,"line_start":862,"line_end":862,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(number.to_string(), \"11.764705882352940000000000000\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":31508,"byte_end":31577,"line_start":863,"line_end":863,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(number.scale(), 27);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":31582,"byte_end":31617,"line_start":864,"line_end":864,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":31622,"byte_end":31629,"line_start":865,"line_end":865,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":32329,"byte_end":32338,"line_start":884,"line_end":884,"column_start":18,"column_end":27},"name":"serialize","qualname":"<Decimal>::serialize","value":"const fn serialize(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns a serialized version of the decimal number.\n The resulting byte array will have the following representation:","sig":null,"attributes":[{"value":"/ Returns a serialized version of the decimal number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":32009,"byte_end":32064,"line_start":876,"line_end":876,"column_start":5,"column_end":60}},{"value":"/ The resulting byte array will have the following representation:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":32069,"byte_end":32137,"line_start":877,"line_end":877,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":32142,"byte_end":32145,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ * Bytes 1-4: flags","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":32150,"byte_end":32172,"line_start":879,"line_end":879,"column_start":5,"column_end":27}},{"value":"/ * Bytes 5-8: lo portion of `m`","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":32177,"byte_end":32211,"line_start":880,"line_end":880,"column_start":5,"column_end":39}},{"value":"/ * Bytes 9-12: mid portion of `m`","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":32216,"byte_end":32252,"line_start":881,"line_end":881,"column_start":5,"column_end":41}},{"value":"/ * Bytes 13-16: high portion of `m`","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":32257,"byte_end":32295,"line_start":882,"line_end":882,"column_start":5,"column_end":43}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":32300,"byte_end":32311,"line_start":883,"line_end":883,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":33466,"byte_end":33477,"line_start":913,"line_end":913,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<Decimal>::deserialize","value":"fn deserialize([u8; ]) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Deserializes the given bytes into a decimal number.\n The deserialized byte representation must be 16 bytes and adhere to the following convention:","sig":null,"attributes":[{"value":"/ Deserializes the given bytes into a decimal number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":33123,"byte_end":33178,"line_start":905,"line_end":905,"column_start":5,"column_end":60}},{"value":"/ The deserialized byte representation must be 16 bytes and adhere to the following convention:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":33183,"byte_end":33280,"line_start":906,"line_end":906,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":33285,"byte_end":33288,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ * Bytes 1-4: flags","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":33293,"byte_end":33315,"line_start":908,"line_end":908,"column_start":5,"column_end":27}},{"value":"/ * Bytes 5-8: lo portion of `m`","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":33320,"byte_end":33354,"line_start":909,"line_end":909,"column_start":5,"column_end":39}},{"value":"/ * Bytes 9-12: mid portion of `m`","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":33359,"byte_end":33395,"line_start":910,"line_end":910,"column_start":5,"column_end":41}},{"value":"/ * Bytes 13-16: high portion of `m`","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":33400,"byte_end":33438,"line_start":911,"line_end":911,"column_start":5,"column_end":43}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":33443,"byte_end":33454,"line_start":912,"line_end":912,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35282,"byte_end":35293,"line_start":949,"line_end":949,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<Decimal>::is_negative","value":"fn is_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the decimal is negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the decimal is negative.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35125,"byte_end":35171,"line_start":946,"line_end":946,"column_start":5,"column_end":51}},{"value":"deprecated(since = \"0.6.3\", note = \"please use `is_sign_negative` instead\")","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35176,"byte_end":35254,"line_start":947,"line_end":947,"column_start":5,"column_end":83}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35259,"byte_end":35270,"line_start":948,"line_end":948,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35511,"byte_end":35522,"line_start":956,"line_end":956,"column_start":12,"column_end":23},"name":"is_positive","qualname":"<Decimal>::is_positive","value":"fn is_positive(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the decimal is positive.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the decimal is positive.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35354,"byte_end":35400,"line_start":953,"line_end":953,"column_start":5,"column_end":51}},{"value":"deprecated(since = \"0.6.3\", note = \"please use `is_sign_positive` instead\")","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35405,"byte_end":35483,"line_start":954,"line_end":954,"column_start":5,"column_end":83}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35488,"byte_end":35499,"line_start":955,"line_end":955,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35933,"byte_end":35949,"line_start":971,"line_end":971,"column_start":18,"column_end":34},"name":"is_sign_negative","qualname":"<Decimal>::is_sign_negative","value":"const fn is_sign_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the sign bit of the decimal is negative.","sig":null,"attributes":[{"value":"/ Returns `true` if the sign bit of the decimal is negative.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35583,"byte_end":35645,"line_start":960,"line_end":960,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35650,"byte_end":35653,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35658,"byte_end":35671,"line_start":962,"line_end":962,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35676,"byte_end":35683,"line_start":963,"line_end":963,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35688,"byte_end":35723,"line_start":964,"line_end":964,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35728,"byte_end":35733,"line_start":965,"line_end":965,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(true, Decimal::new(-1, 0).is_sign_negative());","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35738,"byte_end":35799,"line_start":966,"line_end":966,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(false, Decimal::new(1, 0).is_sign_negative());","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35804,"byte_end":35865,"line_start":967,"line_end":967,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35870,"byte_end":35877,"line_start":968,"line_end":968,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35882,"byte_end":35899,"line_start":969,"line_end":969,"column_start":5,"column_end":22}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":35904,"byte_end":35915,"line_start":970,"line_end":970,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36363,"byte_end":36379,"line_start":986,"line_end":986,"column_start":18,"column_end":34},"name":"is_sign_positive","qualname":"<Decimal>::is_sign_positive","value":"const fn is_sign_positive(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the sign bit of the decimal is positive.","sig":null,"attributes":[{"value":"/ Returns `true` if the sign bit of the decimal is positive.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36013,"byte_end":36075,"line_start":975,"line_end":975,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36080,"byte_end":36083,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36088,"byte_end":36101,"line_start":977,"line_end":977,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36106,"byte_end":36113,"line_start":978,"line_end":978,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36118,"byte_end":36153,"line_start":979,"line_end":979,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36158,"byte_end":36163,"line_start":980,"line_end":980,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(false, Decimal::new(-1, 0).is_sign_positive());","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36168,"byte_end":36230,"line_start":981,"line_end":981,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(true, Decimal::new(1, 0).is_sign_positive());","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36235,"byte_end":36295,"line_start":982,"line_end":982,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36300,"byte_end":36307,"line_start":983,"line_end":983,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36312,"byte_end":36329,"line_start":984,"line_end":984,"column_start":5,"column_end":22}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36334,"byte_end":36345,"line_start":985,"line_end":985,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36634,"byte_end":36643,"line_start":993,"line_end":993,"column_start":18,"column_end":27},"name":"min_value","qualname":"<Decimal>::min_value","value":"const fn min_value() -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum possible number that `Decimal` can represent.\n","sig":null,"attributes":[{"value":"/ Returns the minimum possible number that `Decimal` can represent.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36444,"byte_end":36513,"line_start":990,"line_end":990,"column_start":5,"column_end":74}},{"value":"deprecated(since = \"1.12.0\", note =\n\"Use the associated constant Decimal::MIN\")","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36518,"byte_end":36600,"line_start":991,"line_end":991,"column_start":5,"column_end":87}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36605,"byte_end":36616,"line_start":992,"line_end":992,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36872,"byte_end":36881,"line_start":1000,"line_end":1000,"column_start":18,"column_end":27},"name":"max_value","qualname":"<Decimal>::max_value","value":"const fn max_value() -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum possible number that `Decimal` can represent.\n","sig":null,"attributes":[{"value":"/ Returns the maximum possible number that `Decimal` can represent.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36682,"byte_end":36751,"line_start":997,"line_end":997,"column_start":5,"column_end":74}},{"value":"deprecated(since = \"1.12.0\", note =\n\"Use the associated constant Decimal::MAX\")","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36756,"byte_end":36838,"line_start":998,"line_end":998,"column_start":5,"column_end":87}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36843,"byte_end":36854,"line_start":999,"line_end":999,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":37346,"byte_end":37351,"line_start":1018,"line_end":1018,"column_start":12,"column_end":17},"name":"trunc","qualname":"<Decimal>::trunc","value":"fn trunc(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` integral with no fractional portion.\n This is a true truncation whereby no rounding is performed.","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` integral with no fractional portion.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36920,"byte_end":36984,"line_start":1004,"line_end":1004,"column_start":5,"column_end":69}},{"value":"/ This is a true truncation whereby no rounding is performed.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":36989,"byte_end":37052,"line_start":1005,"line_end":1005,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":37057,"byte_end":37060,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":37065,"byte_end":37078,"line_start":1007,"line_end":1007,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":37083,"byte_end":37086,"line_start":1008,"line_end":1008,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":37091,"byte_end":37098,"line_start":1009,"line_end":1009,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":37103,"byte_end":37135,"line_start":1010,"line_end":1010,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":37140,"byte_end":37145,"line_start":1011,"line_end":1011,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::new(3141, 3);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":37150,"byte_end":37185,"line_start":1012,"line_end":1012,"column_start":5,"column_end":40}},{"value":"/ let trunc = Decimal::new(3, 0);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":37190,"byte_end":37225,"line_start":1013,"line_end":1013,"column_start":5,"column_end":40}},{"value":"/ // note that it returns a decimal","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":37230,"byte_end":37267,"line_start":1014,"line_end":1014,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(pi.trunc(), trunc);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":37272,"byte_end":37306,"line_start":1015,"line_end":1015,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":37311,"byte_end":37318,"line_start":1016,"line_end":1016,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":37323,"byte_end":37334,"line_start":1017,"line_end":1017,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38533,"byte_end":38538,"line_start":1057,"line_end":1057,"column_start":12,"column_end":17},"name":"fract","qualname":"<Decimal>::fract","value":"fn fract(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` representing the fractional portion of the number.","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` representing the fractional portion of the number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38159,"byte_end":38237,"line_start":1044,"line_end":1044,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38242,"byte_end":38245,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38250,"byte_end":38263,"line_start":1046,"line_end":1046,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38268,"byte_end":38271,"line_start":1047,"line_end":1047,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38276,"byte_end":38283,"line_start":1048,"line_end":1048,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38288,"byte_end":38320,"line_start":1049,"line_end":1049,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38325,"byte_end":38330,"line_start":1050,"line_end":1050,"column_start":5,"column_end":10}},{"value":"/ let pi = Decimal::new(3141, 3);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38335,"byte_end":38370,"line_start":1051,"line_end":1051,"column_start":5,"column_end":40}},{"value":"/ let fract = Decimal::new(141, 3);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38375,"byte_end":38412,"line_start":1052,"line_end":1052,"column_start":5,"column_end":42}},{"value":"/ // note that it returns a decimal","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38417,"byte_end":38454,"line_start":1053,"line_end":1053,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(pi.fract(), fract);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38459,"byte_end":38493,"line_start":1054,"line_end":1054,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38498,"byte_end":38505,"line_start":1055,"line_end":1055,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38510,"byte_end":38521,"line_start":1056,"line_end":1056,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38992,"byte_end":38995,"line_start":1074,"line_end":1074,"column_start":12,"column_end":15},"name":"abs","qualname":"<Decimal>::abs","value":"fn abs(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`.","sig":null,"attributes":[{"value":"/ Computes the absolute value of `self`.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38723,"byte_end":38765,"line_start":1063,"line_end":1063,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38770,"byte_end":38773,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38778,"byte_end":38791,"line_start":1065,"line_end":1065,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38796,"byte_end":38799,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38804,"byte_end":38811,"line_start":1067,"line_end":1067,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38816,"byte_end":38848,"line_start":1068,"line_end":1068,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38853,"byte_end":38858,"line_start":1069,"line_end":1069,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::new(-3141, 3);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38863,"byte_end":38900,"line_start":1070,"line_end":1070,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(num.abs().to_string(), \"3.141\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38905,"byte_end":38952,"line_start":1071,"line_end":1071,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38957,"byte_end":38964,"line_start":1072,"line_end":1072,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":38969,"byte_end":38980,"line_start":1073,"line_end":1073,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39389,"byte_end":39394,"line_start":1091,"line_end":1091,"column_start":12,"column_end":17},"name":"floor","qualname":"<Decimal>::floor","value":"fn floor(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the largest integer less than or equal to a number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39102,"byte_end":39165,"line_start":1080,"line_end":1080,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39170,"byte_end":39173,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39178,"byte_end":39191,"line_start":1082,"line_end":1082,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39196,"byte_end":39199,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39204,"byte_end":39211,"line_start":1084,"line_end":1084,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39216,"byte_end":39248,"line_start":1085,"line_end":1085,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39253,"byte_end":39258,"line_start":1086,"line_end":1086,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::new(3641, 3);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39263,"byte_end":39299,"line_start":1087,"line_end":1087,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(num.floor().to_string(), \"3\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39304,"byte_end":39349,"line_start":1088,"line_end":1088,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39354,"byte_end":39361,"line_start":1089,"line_end":1089,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39366,"byte_end":39377,"line_start":1090,"line_end":1090,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40145,"byte_end":40149,"line_start":1120,"line_end":1120,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Decimal>::ceil","value":"fn ceil(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the smallest integer greater than or equal to a number.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39768,"byte_end":39835,"line_start":1107,"line_end":1107,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39840,"byte_end":39843,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39848,"byte_end":39861,"line_start":1109,"line_end":1109,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39866,"byte_end":39869,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39874,"byte_end":39881,"line_start":1111,"line_end":1111,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39886,"byte_end":39918,"line_start":1112,"line_end":1112,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39923,"byte_end":39928,"line_start":1113,"line_end":1113,"column_start":5,"column_end":10}},{"value":"/ let num = Decimal::new(3141, 3);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39933,"byte_end":39969,"line_start":1114,"line_end":1114,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(num.ceil().to_string(), \"4\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":39974,"byte_end":40018,"line_start":1115,"line_end":1115,"column_start":5,"column_end":49}},{"value":"/ let num = Decimal::new(3, 0);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40023,"byte_end":40056,"line_start":1116,"line_end":1116,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(num.ceil().to_string(), \"3\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40061,"byte_end":40105,"line_start":1117,"line_end":1117,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40110,"byte_end":40117,"line_start":1118,"line_end":1118,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40122,"byte_end":40133,"line_start":1119,"line_end":1119,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40752,"byte_end":40755,"line_start":1145,"line_end":1145,"column_start":12,"column_end":15},"name":"max","qualname":"<Decimal>::max","value":"fn max(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40497,"byte_end":40540,"line_start":1135,"line_end":1135,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40545,"byte_end":40548,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40553,"byte_end":40560,"line_start":1137,"line_end":1137,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40565,"byte_end":40597,"line_start":1138,"line_end":1138,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40602,"byte_end":40607,"line_start":1139,"line_end":1139,"column_start":5,"column_end":10}},{"value":"/ let x = Decimal::new(1, 0);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40612,"byte_end":40643,"line_start":1140,"line_end":1140,"column_start":5,"column_end":36}},{"value":"/ let y = Decimal::new(2, 0);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40648,"byte_end":40679,"line_start":1141,"line_end":1141,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(y, x.max(y));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40684,"byte_end":40712,"line_start":1142,"line_end":1142,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40717,"byte_end":40724,"line_start":1143,"line_end":1143,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40729,"byte_end":40740,"line_start":1144,"line_end":1144,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41145,"byte_end":41148,"line_start":1163,"line_end":1163,"column_start":12,"column_end":15},"name":"min","qualname":"<Decimal>::min","value":"fn min(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40890,"byte_end":40933,"line_start":1153,"line_end":1153,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40938,"byte_end":40941,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40946,"byte_end":40953,"line_start":1155,"line_end":1155,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40958,"byte_end":40990,"line_start":1156,"line_end":1156,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":40995,"byte_end":41000,"line_start":1157,"line_end":1157,"column_start":5,"column_end":10}},{"value":"/ let x = Decimal::new(1, 0);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41005,"byte_end":41036,"line_start":1158,"line_end":1158,"column_start":5,"column_end":36}},{"value":"/ let y = Decimal::new(2, 0);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41041,"byte_end":41072,"line_start":1159,"line_end":1159,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(x, x.min(y));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41077,"byte_end":41105,"line_start":1160,"line_end":1160,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41110,"byte_end":41117,"line_start":1161,"line_end":1161,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41122,"byte_end":41133,"line_start":1162,"line_end":1162,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41673,"byte_end":41682,"line_start":1184,"line_end":1184,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Decimal>::normalize","value":"fn normalize(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Strips any trailing zero's from a `Decimal` and converts -0 to 0.","sig":null,"attributes":[{"value":"/ Strips any trailing zero's from a `Decimal` and converts -0 to 0.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41283,"byte_end":41352,"line_start":1171,"line_end":1171,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41357,"byte_end":41360,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41365,"byte_end":41378,"line_start":1173,"line_end":1173,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41383,"byte_end":41386,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41391,"byte_end":41398,"line_start":1175,"line_end":1175,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41403,"byte_end":41438,"line_start":1176,"line_end":1176,"column_start":5,"column_end":40}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41443,"byte_end":41495,"line_start":1177,"line_end":1177,"column_start":5,"column_end":57}},{"value":"/ let number = Decimal::from_str(\"3.100\")?;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41500,"byte_end":41545,"line_start":1178,"line_end":1178,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(number.normalize().to_string(), \"3.1\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41550,"byte_end":41604,"line_start":1179,"line_end":1179,"column_start":5,"column_end":59}},{"value":"/ # Ok(())","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41609,"byte_end":41621,"line_start":1180,"line_end":1180,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41626,"byte_end":41633,"line_start":1181,"line_end":1181,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41638,"byte_end":41645,"line_start":1182,"line_end":1182,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41650,"byte_end":41661,"line_start":1183,"line_end":1183,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":42282,"byte_end":42298,"line_start":1204,"line_end":1204,"column_start":12,"column_end":28},"name":"normalize_assign","qualname":"<Decimal>::normalize_assign","value":"fn normalize_assign(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" An in place version of `normalize`. Strips any trailing zero's from a `Decimal` and converts -0 to 0.","sig":null,"attributes":[{"value":"/ An in place version of `normalize`. Strips any trailing zero's from a `Decimal` and converts -0 to 0.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41796,"byte_end":41901,"line_start":1190,"line_end":1190,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41906,"byte_end":41909,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41914,"byte_end":41927,"line_start":1192,"line_end":1192,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41932,"byte_end":41935,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41940,"byte_end":41947,"line_start":1194,"line_end":1194,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41952,"byte_end":41987,"line_start":1195,"line_end":1195,"column_start":5,"column_end":40}},{"value":"/ # fn main() -> Result<(), rust_decimal::Error> {","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":41992,"byte_end":42044,"line_start":1196,"line_end":1196,"column_start":5,"column_end":57}},{"value":"/ let mut number = Decimal::from_str(\"3.100\")?;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":42049,"byte_end":42098,"line_start":1197,"line_end":1197,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(number.to_string(), \"3.100\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":42103,"byte_end":42147,"line_start":1198,"line_end":1198,"column_start":5,"column_end":49}},{"value":"/ number.normalize_assign();","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":42152,"byte_end":42182,"line_start":1199,"line_end":1199,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(number.to_string(), \"3.1\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":42187,"byte_end":42229,"line_start":1200,"line_end":1200,"column_start":5,"column_end":47}},{"value":"/ # Ok(())","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":42234,"byte_end":42246,"line_start":1201,"line_end":1201,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":42251,"byte_end":42258,"line_start":1202,"line_end":1202,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":42263,"byte_end":42270,"line_start":1203,"line_end":1203,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43506,"byte_end":43511,"line_start":1245,"line_end":1245,"column_start":12,"column_end":17},"name":"round","qualname":"<Decimal>::round","value":"fn round(&Self) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` number with no fractional portion (i.e. an integer).\n Rounding currently follows \"Bankers Rounding\" rules. e.g. 6.5 -> 6, 7.5 -> 8","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` number with no fractional portion (i.e. an integer).","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":42955,"byte_end":43035,"line_start":1230,"line_end":1230,"column_start":5,"column_end":85}},{"value":"/ Rounding currently follows \"Bankers Rounding\" rules. e.g. 6.5 -> 6, 7.5 -> 8","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43040,"byte_end":43120,"line_start":1231,"line_end":1231,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43125,"byte_end":43128,"line_start":1232,"line_end":1232,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43133,"byte_end":43146,"line_start":1233,"line_end":1233,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43151,"byte_end":43154,"line_start":1234,"line_end":1234,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43159,"byte_end":43166,"line_start":1235,"line_end":1235,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43171,"byte_end":43203,"line_start":1236,"line_end":1236,"column_start":5,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43208,"byte_end":43213,"line_start":1237,"line_end":1237,"column_start":5,"column_end":10}},{"value":"/ // Demonstrating bankers rounding...","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43218,"byte_end":43258,"line_start":1238,"line_end":1238,"column_start":5,"column_end":45}},{"value":"/ let number_down = Decimal::new(65, 1);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43263,"byte_end":43305,"line_start":1239,"line_end":1239,"column_start":5,"column_end":47}},{"value":"/ let number_up   = Decimal::new(75, 1);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43310,"byte_end":43352,"line_start":1240,"line_end":1240,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(number_down.round().to_string(), \"6\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43357,"byte_end":43410,"line_start":1241,"line_end":1241,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(number_up.round().to_string(), \"8\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43415,"byte_end":43466,"line_start":1242,"line_end":1242,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43471,"byte_end":43478,"line_start":1243,"line_end":1243,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43483,"byte_end":43494,"line_start":1244,"line_end":1244,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":44225,"byte_end":44247,"line_start":1267,"line_end":1267,"column_start":12,"column_end":34},"name":"round_dp_with_strategy","qualname":"<Decimal>::round_dp_with_strategy","value":"fn round_dp_with_strategy(&Self, u32, RoundingStrategy) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` number with the specified number of decimal points for fractional\n portion.\n Rounding is performed using the provided [`RoundingStrategy`]","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` number with the specified number of decimal points for fractional","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43568,"byte_end":43661,"line_start":1249,"line_end":1249,"column_start":5,"column_end":98}},{"value":"/ portion.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43666,"byte_end":43678,"line_start":1250,"line_end":1250,"column_start":5,"column_end":17}},{"value":"/ Rounding is performed using the provided [`RoundingStrategy`]","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43683,"byte_end":43748,"line_start":1251,"line_end":1251,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43753,"byte_end":43756,"line_start":1252,"line_end":1252,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43761,"byte_end":43776,"line_start":1253,"line_end":1253,"column_start":5,"column_end":20}},{"value":"/ * `dp`: the number of decimal points to round to.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43781,"byte_end":43834,"line_start":1254,"line_end":1254,"column_start":5,"column_end":58}},{"value":"/ * `strategy`: the [`RoundingStrategy`] to use.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43839,"byte_end":43889,"line_start":1255,"line_end":1255,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43894,"byte_end":43897,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43902,"byte_end":43915,"line_start":1257,"line_end":1257,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43920,"byte_end":43923,"line_start":1258,"line_end":1258,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43928,"byte_end":43935,"line_start":1259,"line_end":1259,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::{Decimal, RoundingStrategy};","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43940,"byte_end":43992,"line_start":1260,"line_end":1260,"column_start":5,"column_end":57}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":43997,"byte_end":44032,"line_start":1261,"line_end":1261,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":44037,"byte_end":44042,"line_start":1262,"line_end":1262,"column_start":5,"column_end":10}},{"value":"/ let tax = dec!(3.4395);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":44047,"byte_end":44074,"line_start":1263,"line_end":1263,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(tax.round_dp_with_strategy(2, RoundingStrategy::MidpointAwayFromZero).to_string(), \"3.44\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":44079,"byte_end":44185,"line_start":1264,"line_end":1264,"column_start":5,"column_end":111}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":44190,"byte_end":44197,"line_start":1265,"line_end":1265,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":44202,"byte_end":44213,"line_start":1266,"line_end":1266,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50092,"byte_end":50100,"line_start":1420,"line_end":1420,"column_start":12,"column_end":20},"name":"round_dp","qualname":"<Decimal>::round_dp","value":"fn round_dp(&Self, u32) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Decimal` number with the specified number of decimal points for fractional portion.\n Rounding currently follows \"Bankers Rounding\" rules. e.g. 6.5 -> 6, 7.5 -> 8","sig":null,"attributes":[{"value":"/ Returns a new `Decimal` number with the specified number of decimal points for fractional portion.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":49535,"byte_end":49637,"line_start":1404,"line_end":1404,"column_start":5,"column_end":107}},{"value":"/ Rounding currently follows \"Bankers Rounding\" rules. e.g. 6.5 -> 6, 7.5 -> 8","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":49642,"byte_end":49722,"line_start":1405,"line_end":1405,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":49727,"byte_end":49730,"line_start":1406,"line_end":1406,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":49735,"byte_end":49750,"line_start":1407,"line_end":1407,"column_start":5,"column_end":20}},{"value":"/ * `dp`: the number of decimal points to round to.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":49755,"byte_end":49808,"line_start":1408,"line_end":1408,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":49813,"byte_end":49816,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":49821,"byte_end":49834,"line_start":1410,"line_end":1410,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":49839,"byte_end":49842,"line_start":1411,"line_end":1411,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":49847,"byte_end":49854,"line_start":1412,"line_end":1412,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":49859,"byte_end":49891,"line_start":1413,"line_end":1413,"column_start":5,"column_end":37}},{"value":"/ # use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":49896,"byte_end":49931,"line_start":1414,"line_end":1414,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":49936,"byte_end":49941,"line_start":1415,"line_end":1415,"column_start":5,"column_end":10}},{"value":"/ let pi = dec!(3.1415926535897932384626433832);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":49946,"byte_end":49996,"line_start":1416,"line_end":1416,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(pi.round_dp(2).to_string(), \"3.14\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50001,"byte_end":50052,"line_start":1417,"line_end":1417,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50057,"byte_end":50064,"line_start":1418,"line_end":1418,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50069,"byte_end":50080,"line_start":1419,"line_end":1419,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51906,"byte_end":51914,"line_start":1461,"line_end":1461,"column_start":12,"column_end":20},"name":"round_sf","qualname":"<Decimal>::round_sf","value":"fn round_sf(&Self, u32) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some(Decimal)` number rounded to the specified number of significant digits. If\n the resulting number is unable to be represented by the `Decimal` number then `None` will\n be returned.\n When the number of significant figures of the `Decimal` being rounded is greater than the requested\n number of significant digits then rounding will be performed using `MidpointNearestEven` strategy.","sig":null,"attributes":[{"value":"/ Returns `Some(Decimal)` number rounded to the specified number of significant digits. If","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50220,"byte_end":50312,"line_start":1424,"line_end":1424,"column_start":5,"column_end":97}},{"value":"/ the resulting number is unable to be represented by the `Decimal` number then `None` will","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50317,"byte_end":50410,"line_start":1425,"line_end":1425,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50415,"byte_end":50431,"line_start":1426,"line_end":1426,"column_start":5,"column_end":21}},{"value":"/ When the number of significant figures of the `Decimal` being rounded is greater than the requested","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50436,"byte_end":50539,"line_start":1427,"line_end":1427,"column_start":5,"column_end":108}},{"value":"/ number of significant digits then rounding will be performed using `MidpointNearestEven` strategy.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50544,"byte_end":50646,"line_start":1428,"line_end":1428,"column_start":5,"column_end":107}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50651,"byte_end":50654,"line_start":1429,"line_end":1429,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50659,"byte_end":50674,"line_start":1430,"line_end":1430,"column_start":5,"column_end":20}},{"value":"/ * `digits`: the number of significant digits to round to.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50679,"byte_end":50740,"line_start":1431,"line_end":1431,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50745,"byte_end":50748,"line_start":1432,"line_end":1432,"column_start":5,"column_end":8}},{"value":"/ # Remarks","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50753,"byte_end":50766,"line_start":1433,"line_end":1433,"column_start":5,"column_end":18}},{"value":"/ A significant figure is determined using the following rules:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50771,"byte_end":50836,"line_start":1434,"line_end":1434,"column_start":5,"column_end":70}},{"value":"/ 1. Non-zero digits are always significant.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50841,"byte_end":50887,"line_start":1435,"line_end":1435,"column_start":5,"column_end":51}},{"value":"/ 2. Zeros between non-zero digits are always significant.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50892,"byte_end":50952,"line_start":1436,"line_end":1436,"column_start":5,"column_end":65}},{"value":"/ 3. Leading zeros are never significant.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":50957,"byte_end":51000,"line_start":1437,"line_end":1437,"column_start":5,"column_end":48}},{"value":"/ 4. Trailing zeros are only significant if the number contains a decimal point.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51005,"byte_end":51087,"line_start":1438,"line_end":1438,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51092,"byte_end":51095,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51100,"byte_end":51113,"line_start":1440,"line_end":1440,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51118,"byte_end":51121,"line_start":1441,"line_end":1441,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51126,"byte_end":51133,"line_start":1442,"line_end":1442,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51138,"byte_end":51170,"line_start":1443,"line_end":1443,"column_start":5,"column_end":37}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51175,"byte_end":51208,"line_start":1444,"line_end":1444,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51213,"byte_end":51216,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ let value = dec!(305.459);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51221,"byte_end":51251,"line_start":1446,"line_end":1446,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(value.round_sf(0), Some(dec!(0)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51256,"byte_end":51305,"line_start":1447,"line_end":1447,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(value.round_sf(1), Some(dec!(300)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51310,"byte_end":51361,"line_start":1448,"line_end":1448,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(value.round_sf(2), Some(dec!(310)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51366,"byte_end":51417,"line_start":1449,"line_end":1449,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(value.round_sf(3), Some(dec!(305)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51422,"byte_end":51473,"line_start":1450,"line_end":1450,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(value.round_sf(4), Some(dec!(305.5)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51478,"byte_end":51531,"line_start":1451,"line_end":1451,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(value.round_sf(5), Some(dec!(305.46)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51536,"byte_end":51590,"line_start":1452,"line_end":1452,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(value.round_sf(6), Some(dec!(305.459)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51595,"byte_end":51650,"line_start":1453,"line_end":1453,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(value.round_sf(7), Some(dec!(305.4590)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51655,"byte_end":51711,"line_start":1454,"line_end":1454,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(Decimal::MAX.round_sf(1), None);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51716,"byte_end":51763,"line_start":1455,"line_end":1455,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51768,"byte_end":51771,"line_start":1456,"line_end":1456,"column_start":5,"column_end":8}},{"value":"/ let value = dec!(0.012301);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51776,"byte_end":51807,"line_start":1457,"line_end":1457,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(value.round_sf(3), Some(dec!(0.0123)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51812,"byte_end":51866,"line_start":1458,"line_end":1458,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51871,"byte_end":51878,"line_start":1459,"line_end":1459,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":51883,"byte_end":51894,"line_start":1460,"line_end":1460,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":54265,"byte_end":54287,"line_start":1503,"line_end":1503,"column_start":12,"column_end":34},"name":"round_sf_with_strategy","qualname":"<Decimal>::round_sf_with_strategy","value":"fn round_sf_with_strategy(&Self, u32, RoundingStrategy) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some(Decimal)` number rounded to the specified number of significant digits. If\n the resulting number is unable to be represented by the `Decimal` number then `None` will\n be returned.\n When the number of significant figures of the `Decimal` being rounded is greater than the requested\n number of significant digits then rounding will be performed using the provided [RoundingStrategy].","sig":null,"attributes":[{"value":"/ Returns `Some(Decimal)` number rounded to the specified number of significant digits. If","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52050,"byte_end":52142,"line_start":1465,"line_end":1465,"column_start":5,"column_end":97}},{"value":"/ the resulting number is unable to be represented by the `Decimal` number then `None` will","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52147,"byte_end":52240,"line_start":1466,"line_end":1466,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52245,"byte_end":52261,"line_start":1467,"line_end":1467,"column_start":5,"column_end":21}},{"value":"/ When the number of significant figures of the `Decimal` being rounded is greater than the requested","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52266,"byte_end":52369,"line_start":1468,"line_end":1468,"column_start":5,"column_end":108}},{"value":"/ number of significant digits then rounding will be performed using the provided [RoundingStrategy].","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52374,"byte_end":52477,"line_start":1469,"line_end":1469,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52482,"byte_end":52485,"line_start":1470,"line_end":1470,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52490,"byte_end":52505,"line_start":1471,"line_end":1471,"column_start":5,"column_end":20}},{"value":"/ * `digits`: the number of significant digits to round to.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52510,"byte_end":52571,"line_start":1472,"line_end":1472,"column_start":5,"column_end":66}},{"value":"/ * `strategy`: if required, the rounding strategy to use.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52576,"byte_end":52636,"line_start":1473,"line_end":1473,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52641,"byte_end":52644,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ # Remarks","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52649,"byte_end":52662,"line_start":1475,"line_end":1475,"column_start":5,"column_end":18}},{"value":"/ A significant figure is determined using the following rules:","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52667,"byte_end":52732,"line_start":1476,"line_end":1476,"column_start":5,"column_end":70}},{"value":"/ 1. Non-zero digits are always significant.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52737,"byte_end":52783,"line_start":1477,"line_end":1477,"column_start":5,"column_end":51}},{"value":"/ 2. Zeros between non-zero digits are always significant.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52788,"byte_end":52848,"line_start":1478,"line_end":1478,"column_start":5,"column_end":65}},{"value":"/ 3. Leading zeros are never significant.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52853,"byte_end":52896,"line_start":1479,"line_end":1479,"column_start":5,"column_end":48}},{"value":"/ 4. Trailing zeros are only significant if the number contains a decimal point.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52901,"byte_end":52983,"line_start":1480,"line_end":1480,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52988,"byte_end":52991,"line_start":1481,"line_end":1481,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":52996,"byte_end":53009,"line_start":1482,"line_end":1482,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53014,"byte_end":53017,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53022,"byte_end":53029,"line_start":1484,"line_end":1484,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::{Decimal, RoundingStrategy};","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53034,"byte_end":53086,"line_start":1485,"line_end":1485,"column_start":5,"column_end":57}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53091,"byte_end":53124,"line_start":1486,"line_end":1486,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53129,"byte_end":53132,"line_start":1487,"line_end":1487,"column_start":5,"column_end":8}},{"value":"/ let value = dec!(305.459);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53137,"byte_end":53167,"line_start":1488,"line_end":1488,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(value.round_sf_with_strategy(0, RoundingStrategy::ToZero), Some(dec!(0)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53172,"byte_end":53261,"line_start":1489,"line_end":1489,"column_start":5,"column_end":94}},{"value":"/ assert_eq!(value.round_sf_with_strategy(1, RoundingStrategy::ToZero), Some(dec!(300)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53266,"byte_end":53357,"line_start":1490,"line_end":1490,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(value.round_sf_with_strategy(2, RoundingStrategy::ToZero), Some(dec!(300)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53362,"byte_end":53453,"line_start":1491,"line_end":1491,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(value.round_sf_with_strategy(3, RoundingStrategy::ToZero), Some(dec!(305)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53458,"byte_end":53549,"line_start":1492,"line_end":1492,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(value.round_sf_with_strategy(4, RoundingStrategy::ToZero), Some(dec!(305.4)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53554,"byte_end":53647,"line_start":1493,"line_end":1493,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(value.round_sf_with_strategy(5, RoundingStrategy::ToZero), Some(dec!(305.45)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53652,"byte_end":53746,"line_start":1494,"line_end":1494,"column_start":5,"column_end":99}},{"value":"/ assert_eq!(value.round_sf_with_strategy(6, RoundingStrategy::ToZero), Some(dec!(305.459)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53751,"byte_end":53846,"line_start":1495,"line_end":1495,"column_start":5,"column_end":100}},{"value":"/ assert_eq!(value.round_sf_with_strategy(7, RoundingStrategy::ToZero), Some(dec!(305.4590)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53851,"byte_end":53947,"line_start":1496,"line_end":1496,"column_start":5,"column_end":101}},{"value":"/ assert_eq!(Decimal::MAX.round_sf_with_strategy(1, RoundingStrategy::ToZero), Some(dec!(70000000000000000000000000000)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":53952,"byte_end":54076,"line_start":1497,"line_end":1497,"column_start":5,"column_end":129}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":54081,"byte_end":54084,"line_start":1498,"line_end":1498,"column_start":5,"column_end":8}},{"value":"/ let value = dec!(0.012301);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":54089,"byte_end":54120,"line_start":1499,"line_end":1499,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(value.round_sf_with_strategy(3, RoundingStrategy::AwayFromZero), Some(dec!(0.0124)));","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":54125,"byte_end":54225,"line_start":1500,"line_end":1500,"column_start":5,"column_end":105}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":54230,"byte_end":54237,"line_start":1501,"line_end":1501,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":54242,"byte_end":54253,"line_start":1502,"line_end":1502,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":59123,"byte_end":59129,"line_start":1607,"line_end":1607,"column_start":18,"column_end":24},"name":"unpack","qualname":"<Decimal>::unpack","value":"const fn unpack(&Self) -> UnpackedDecimal","parent":null,"children":[],"decl_id":null,"docs":" Convert `Decimal` to an internal representation of the underlying struct. This is useful\n for debugging the internal state of the object.","sig":null,"attributes":[{"value":"/ Convert `Decimal` to an internal representation of the underlying struct. This is useful","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58307,"byte_end":58399,"line_start":1587,"line_end":1587,"column_start":5,"column_end":97}},{"value":"/ for debugging the internal state of the object.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58404,"byte_end":58455,"line_start":1588,"line_end":1588,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58460,"byte_end":58463,"line_start":1589,"line_end":1589,"column_start":5,"column_end":8}},{"value":"/ # Important Disclaimer","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58468,"byte_end":58494,"line_start":1590,"line_end":1590,"column_start":5,"column_end":31}},{"value":"/ This is primarily intended for library maintainers. The internal representation of a","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58499,"byte_end":58587,"line_start":1591,"line_end":1591,"column_start":5,"column_end":93}},{"value":"/ `Decimal` is considered \"unstable\" for public use.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58592,"byte_end":58646,"line_start":1592,"line_end":1592,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58651,"byte_end":58654,"line_start":1593,"line_end":1593,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58659,"byte_end":58672,"line_start":1594,"line_end":1594,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58677,"byte_end":58680,"line_start":1595,"line_end":1595,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58685,"byte_end":58692,"line_start":1596,"line_end":1596,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::Decimal;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58697,"byte_end":58729,"line_start":1597,"line_end":1597,"column_start":5,"column_end":37}},{"value":"/ use rust_decimal_macros::dec;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58734,"byte_end":58767,"line_start":1598,"line_end":1598,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58772,"byte_end":58775,"line_start":1599,"line_end":1599,"column_start":5,"column_end":8}},{"value":"/ let pi = dec!(3.1415926535897932384626433832);","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58780,"byte_end":58830,"line_start":1600,"line_end":1600,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(format!(\"{:?}\", pi), \"3.1415926535897932384626433832\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58835,"byte_end":58905,"line_start":1601,"line_end":1601,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(format!(\"{:?}\", pi.unpack()), \"UnpackedDecimal { \\","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58910,"byte_end":58975,"line_start":1602,"line_end":1602,"column_start":5,"column_end":70}},{"value":"/     negative: false, scale: 28, hi: 1703060790, mid: 185874565, lo: 1102470952 \\","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":58980,"byte_end":59064,"line_start":1603,"line_end":1603,"column_start":5,"column_end":89}},{"value":"/ }\");","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":59069,"byte_end":59077,"line_start":1604,"line_end":1604,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":59082,"byte_end":59089,"line_start":1605,"line_end":1605,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":59094,"byte_end":59105,"line_start":1606,"line_end":1606,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60858,"byte_end":60873,"line_start":1664,"line_end":1664,"column_start":12,"column_end":27},"name":"from_f32_retain","qualname":"<Decimal>::from_f32_retain","value":"fn from_f32_retain(f32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Parses a 32-bit float into a Decimal number whilst retaining any non-guaranteed precision.","sig":null,"attributes":[{"value":"/ Parses a 32-bit float into a Decimal number whilst retaining any non-guaranteed precision.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":59979,"byte_end":60073,"line_start":1647,"line_end":1647,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60078,"byte_end":60081,"line_start":1648,"line_end":1648,"column_start":5,"column_end":8}},{"value":"/ Typically when a float is parsed in Rust Decimal, any excess bits (after ~7.22 decimal points for","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60086,"byte_end":60187,"line_start":1649,"line_end":1649,"column_start":5,"column_end":106}},{"value":"/ f32 as per IEEE-754) are removed due to any digits following this are considered an approximation","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60192,"byte_end":60293,"line_start":1650,"line_end":1650,"column_start":5,"column_end":106}},{"value":"/ at best. This function bypasses this additional step and retains these excess bits.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60298,"byte_end":60385,"line_start":1651,"line_end":1651,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60390,"byte_end":60393,"line_start":1652,"line_end":1652,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60398,"byte_end":60411,"line_start":1653,"line_end":1653,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60416,"byte_end":60419,"line_start":1654,"line_end":1654,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60424,"byte_end":60431,"line_start":1655,"line_end":1655,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60436,"byte_end":60471,"line_start":1656,"line_end":1656,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60476,"byte_end":60481,"line_start":1657,"line_end":1657,"column_start":5,"column_end":10}},{"value":"/ // Usually floats are parsed leveraging float guarantees. i.e. 0.1_f32 => 0.1","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60486,"byte_end":60567,"line_start":1658,"line_end":1658,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(\"0.1\", Decimal::from_f32(0.1_f32).unwrap().to_string());","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60572,"byte_end":60643,"line_start":1659,"line_end":1659,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60648,"byte_end":60651,"line_start":1660,"line_end":1660,"column_start":5,"column_end":8}},{"value":"/ // Sometimes, we may want to represent the approximation exactly.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60656,"byte_end":60725,"line_start":1661,"line_end":1661,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(\"0.100000001490116119384765625\", Decimal::from_f32_retain(0.1_f32).unwrap().to_string());","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60730,"byte_end":60834,"line_start":1662,"line_end":1662,"column_start":5,"column_end":109}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60839,"byte_end":60846,"line_start":1663,"line_end":1663,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61819,"byte_end":61834,"line_start":1685,"line_end":1685,"column_start":12,"column_end":27},"name":"from_f64_retain","qualname":"<Decimal>::from_f64_retain","value":"fn from_f64_retain(f64) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Parses a 64-bit float into a Decimal number whilst retaining any non-guaranteed precision.","sig":null,"attributes":[{"value":"/ Parses a 64-bit float into a Decimal number whilst retaining any non-guaranteed precision.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":60938,"byte_end":61032,"line_start":1668,"line_end":1668,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61037,"byte_end":61040,"line_start":1669,"line_end":1669,"column_start":5,"column_end":8}},{"value":"/ Typically when a float is parsed in Rust Decimal, any excess bits (after ~15.95 decimal points for","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61045,"byte_end":61147,"line_start":1670,"line_end":1670,"column_start":5,"column_end":107}},{"value":"/ f64 as per IEEE-754) are removed due to any digits following this are considered an approximation","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61152,"byte_end":61253,"line_start":1671,"line_end":1671,"column_start":5,"column_end":106}},{"value":"/ at best. This function bypasses this additional step and retains these excess bits.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61258,"byte_end":61345,"line_start":1672,"line_end":1672,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61350,"byte_end":61353,"line_start":1673,"line_end":1673,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61358,"byte_end":61371,"line_start":1674,"line_end":1674,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61376,"byte_end":61379,"line_start":1675,"line_end":1675,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61384,"byte_end":61391,"line_start":1676,"line_end":1676,"column_start":5,"column_end":12}},{"value":"/ # use rust_decimal::prelude::*;","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61396,"byte_end":61431,"line_start":1677,"line_end":1677,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61436,"byte_end":61441,"line_start":1678,"line_end":1678,"column_start":5,"column_end":10}},{"value":"/ // Usually floats are parsed leveraging float guarantees. i.e. 0.1_f64 => 0.1","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61446,"byte_end":61527,"line_start":1679,"line_end":1679,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(\"0.1\", Decimal::from_f64(0.1_f64).unwrap().to_string());","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61532,"byte_end":61603,"line_start":1680,"line_end":1680,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61608,"byte_end":61611,"line_start":1681,"line_end":1681,"column_start":5,"column_end":8}},{"value":"/ // Sometimes, we may want to represent the approximation exactly.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61616,"byte_end":61685,"line_start":1682,"line_end":1682,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(\"0.1000000000000000055511151231\", Decimal::from_f64_retain(0.1_f64).unwrap().to_string());","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61690,"byte_end":61795,"line_start":1683,"line_end":1683,"column_start":5,"column_end":110}},{"value":"/ ```","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61800,"byte_end":61807,"line_start":1684,"line_end":1684,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":62109,"byte_end":62116,"line_start":1695,"line_end":1695,"column_start":8,"column_end":15},"name":"default","qualname":"<Decimal as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3128},"children":[],"decl_id":{"krate":2,"index":3129},"docs":" Returns the default value for a `Decimal` (equivalent to `Decimal::ZERO`). [Read more]","sig":null,"attributes":[{"value":"/ Returns the default value for a `Decimal` (equivalent to `Decimal::ZERO`). [Read more]","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61928,"byte_end":62018,"line_start":1691,"line_end":1691,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":62023,"byte_end":62026,"line_start":1692,"line_end":1692,"column_start":5,"column_end":8}},{"value":"/ [Read more]: core::default::Default#tymethod.default","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":62031,"byte_end":62087,"line_start":1693,"line_end":1693,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":62092,"byte_end":62101,"line_start":1694,"line_end":1694,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":65968,"byte_end":65972,"line_start":1813,"line_end":1813,"column_start":8,"column_end":12},"name":"zero","qualname":"<Decimal as num_traits::Zero>::zero","value":"fn zero() -> Decimal","parent":{"krate":20,"index":466},"children":[],"decl_id":{"krate":20,"index":467},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66015,"byte_end":66022,"line_start":1817,"line_end":1817,"column_start":8,"column_end":15},"name":"is_zero","qualname":"<Decimal as num_traits::Zero>::is_zero","value":"fn is_zero(&Self) -> bool","parent":{"krate":20,"index":466},"children":[],"decl_id":{"krate":20,"index":469},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66102,"byte_end":66105,"line_start":1823,"line_end":1823,"column_start":8,"column_end":11},"name":"one","qualname":"<Decimal as num_traits::One>::one","value":"fn one() -> Decimal","parent":{"krate":20,"index":476},"children":[],"decl_id":{"krate":20,"index":477},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66175,"byte_end":66178,"line_start":1829,"line_end":1829,"column_start":8,"column_end":11},"name":"abs","qualname":"<Decimal as num_traits::Signed>::abs","value":"fn abs(&Self) -> Self","parent":{"krate":20,"index":819},"children":[],"decl_id":{"krate":20,"index":820},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66229,"byte_end":66236,"line_start":1833,"line_end":1833,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"<Decimal as num_traits::Signed>::abs_sub","value":"fn abs_sub(&Self, &Self) -> Self","parent":{"krate":20,"index":819},"children":[],"decl_id":{"krate":20,"index":821},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66376,"byte_end":66382,"line_start":1841,"line_end":1841,"column_start":8,"column_end":14},"name":"signum","qualname":"<Decimal as num_traits::Signed>::signum","value":"fn signum(&Self) -> Self","parent":{"krate":20,"index":819},"children":[],"decl_id":{"krate":20,"index":822},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66639,"byte_end":66650,"line_start":1853,"line_end":1853,"column_start":8,"column_end":19},"name":"is_positive","qualname":"<Decimal as num_traits::Signed>::is_positive","value":"fn is_positive(&Self) -> bool","parent":{"krate":20,"index":819},"children":[],"decl_id":{"krate":20,"index":823},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66714,"byte_end":66725,"line_start":1857,"line_end":1857,"column_start":8,"column_end":19},"name":"is_negative","qualname":"<Decimal as num_traits::Signed>::is_negative","value":"fn is_negative(&Self) -> bool","parent":{"krate":20,"index":819},"children":[],"decl_id":{"krate":20,"index":824},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66849,"byte_end":66863,"line_start":1865,"line_end":1865,"column_start":8,"column_end":22},"name":"from_str_radix","qualname":"<Decimal as num_traits::Num>::from_str_radix","value":"fn from_str_radix(&str, u32) -> Result<Self, Self::FromStrRadixErr>","parent":{"krate":20,"index":844},"children":[],"decl_id":{"krate":20,"index":846},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":67038,"byte_end":67046,"line_start":1873,"line_end":1873,"column_start":8,"column_end":16},"name":"from_str","qualname":"<Decimal as std::str::FromStr>::from_str","value":"fn from_str(&str) -> Result<Decimal, Self::Err>","parent":{"krate":2,"index":12556},"children":[],"decl_id":{"krate":2,"index":12558},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":67187,"byte_end":67195,"line_start":1879,"line_end":1879,"column_start":8,"column_end":16},"name":"from_i32","qualname":"<Decimal as num_traits::FromPrimitive>::from_i32","value":"fn from_i32(i32) -> Option<Decimal>","parent":{"krate":20,"index":333},"children":[],"decl_id":{"krate":20,"index":337},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":67593,"byte_end":67601,"line_start":1897,"line_end":1897,"column_start":8,"column_end":16},"name":"from_i64","qualname":"<Decimal as num_traits::FromPrimitive>::from_i64","value":"fn from_i64(i64) -> Option<Decimal>","parent":{"krate":20,"index":333},"children":[],"decl_id":{"krate":20,"index":338},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":68026,"byte_end":68035,"line_start":1915,"line_end":1915,"column_start":8,"column_end":17},"name":"from_i128","qualname":"<Decimal as num_traits::FromPrimitive>::from_i128","value":"fn from_i128(i128) -> Option<Decimal>","parent":{"krate":20,"index":333},"children":[],"decl_id":{"krate":20,"index":339},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":68561,"byte_end":68569,"line_start":1937,"line_end":1937,"column_start":8,"column_end":16},"name":"from_u32","qualname":"<Decimal as num_traits::FromPrimitive>::from_u32","value":"fn from_u32(u32) -> Option<Decimal>","parent":{"krate":20,"index":333},"children":[],"decl_id":{"krate":20,"index":343},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":68727,"byte_end":68735,"line_start":1946,"line_end":1946,"column_start":8,"column_end":16},"name":"from_u64","qualname":"<Decimal as num_traits::FromPrimitive>::from_u64","value":"fn from_u64(u64) -> Option<Decimal>","parent":{"krate":20,"index":333},"children":[],"decl_id":{"krate":20,"index":344},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":68915,"byte_end":68924,"line_start":1955,"line_end":1955,"column_start":8,"column_end":17},"name":"from_u128","qualname":"<Decimal as num_traits::FromPrimitive>::from_u128","value":"fn from_u128(u128) -> Option<Decimal>","parent":{"krate":20,"index":333},"children":[],"decl_id":{"krate":20,"index":345},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":69213,"byte_end":69221,"line_start":1968,"line_end":1968,"column_start":8,"column_end":16},"name":"from_f32","qualname":"<Decimal as num_traits::FromPrimitive>::from_f32","value":"fn from_f32(f32) -> Option<Decimal>","parent":{"krate":20,"index":333},"children":[],"decl_id":{"krate":20,"index":346},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":69371,"byte_end":69379,"line_start":1973,"line_end":1973,"column_start":8,"column_end":16},"name":"from_f64","qualname":"<Decimal as num_traits::FromPrimitive>::from_f64","value":"fn from_f64(f64) -> Option<Decimal>","parent":{"krate":20,"index":333},"children":[],"decl_id":{"krate":20,"index":347},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":78127,"byte_end":78133,"line_start":2218,"line_end":2218,"column_start":8,"column_end":14},"name":"to_i64","qualname":"<Decimal as num_traits::ToPrimitive>::to_i64","value":"fn to_i64(&Self) -> Option<i64>","parent":{"krate":20,"index":307},"children":[],"decl_id":{"krate":20,"index":312},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":79001,"byte_end":79008,"line_start":2245,"line_end":2245,"column_start":8,"column_end":15},"name":"to_i128","qualname":"<Decimal as num_traits::ToPrimitive>::to_i128","value":"fn to_i128(&Self) -> Option<i128>","parent":{"krate":20,"index":307},"children":[],"decl_id":{"krate":20,"index":313},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":79284,"byte_end":79290,"line_start":2255,"line_end":2255,"column_start":8,"column_end":14},"name":"to_u64","qualname":"<Decimal as num_traits::ToPrimitive>::to_u64","value":"fn to_u64(&Self) -> Option<u64>","parent":{"krate":20,"index":307},"children":[],"decl_id":{"krate":20,"index":318},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":79572,"byte_end":79579,"line_start":2269,"line_end":2269,"column_start":8,"column_end":15},"name":"to_u128","qualname":"<Decimal as num_traits::ToPrimitive>::to_u128","value":"fn to_u128(&Self) -> Option<u128>","parent":{"krate":20,"index":307},"children":[],"decl_id":{"krate":20,"index":319},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":79808,"byte_end":79814,"line_start":2278,"line_end":2278,"column_start":8,"column_end":14},"name":"to_f64","qualname":"<Decimal as num_traits::ToPrimitive>::to_f64","value":"fn to_f64(&Self) -> Option<f64>","parent":{"krate":20,"index":307},"children":[],"decl_id":{"krate":20,"index":321},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81029,"byte_end":81032,"line_start":2304,"line_end":2304,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Decimal as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":2,"index":9909},"children":[],"decl_id":{"krate":2,"index":9910},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81525,"byte_end":81528,"line_start":2316,"line_end":2316,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Decimal as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":2,"index":9902},"children":[],"decl_id":{"krate":2,"index":9903},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81672,"byte_end":81675,"line_start":2322,"line_end":2322,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Decimal as std::fmt::LowerExp>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9921},"children":[],"decl_id":{"krate":2,"index":9922},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81835,"byte_end":81838,"line_start":2328,"line_end":2328,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Decimal as std::fmt::UpperExp>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9923},"children":[],"decl_id":{"krate":2,"index":9924},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":82016,"byte_end":82019,"line_start":2336,"line_end":2336,"column_start":8,"column_end":11},"name":"neg","qualname":"<Decimal as std::ops::Neg>::neg","value":"fn neg(Self) -> Decimal","parent":{"krate":2,"index":3245},"children":[],"decl_id":{"krate":2,"index":3247},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":82213,"byte_end":82216,"line_start":2346,"line_end":2346,"column_start":8,"column_end":11},"name":"neg","qualname":"<&'a Decimal as std::ops::Neg>::neg","value":"fn neg(Self) -> Decimal","parent":{"krate":2,"index":3245},"children":[],"decl_id":{"krate":2,"index":3247},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":82452,"byte_end":82462,"line_start":2357,"line_end":2357,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<Decimal as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3249},"children":[],"decl_id":{"krate":2,"index":3251},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":82716,"byte_end":82726,"line_start":2367,"line_end":2367,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<Decimal as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3249},"children":[],"decl_id":{"krate":2,"index":3251},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":82868,"byte_end":82878,"line_start":2373,"line_end":2373,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<&'a mut Decimal as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3249},"children":[],"decl_id":{"krate":2,"index":3251},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":83020,"byte_end":83030,"line_start":2379,"line_end":2379,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<&'a mut Decimal as std::ops::AddAssign>::add_assign","value":"fn add_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3249},"children":[],"decl_id":{"krate":2,"index":3251},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":83152,"byte_end":83162,"line_start":2385,"line_end":2385,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<Decimal as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3253},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":83416,"byte_end":83426,"line_start":2395,"line_end":2395,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<Decimal as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3253},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":83568,"byte_end":83578,"line_start":2401,"line_end":2401,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<&'a mut Decimal as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3253},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":83720,"byte_end":83730,"line_start":2407,"line_end":2407,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<&'a mut Decimal as std::ops::SubAssign>::sub_assign","value":"fn sub_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3253},"children":[],"decl_id":{"krate":2,"index":3255},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":83852,"byte_end":83862,"line_start":2413,"line_end":2413,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<Decimal as std::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3259},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":84116,"byte_end":84126,"line_start":2423,"line_end":2423,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<Decimal as std::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3259},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":84268,"byte_end":84278,"line_start":2429,"line_end":2429,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<&'a mut Decimal as std::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3259},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":84420,"byte_end":84430,"line_start":2435,"line_end":2435,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"<&'a mut Decimal as std::ops::MulAssign>::mul_assign","value":"fn mul_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3257},"children":[],"decl_id":{"krate":2,"index":3259},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":84552,"byte_end":84562,"line_start":2441,"line_end":2441,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<Decimal as std::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3261},"children":[],"decl_id":{"krate":2,"index":3263},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":84816,"byte_end":84826,"line_start":2451,"line_end":2451,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<Decimal as std::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3261},"children":[],"decl_id":{"krate":2,"index":3263},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":84968,"byte_end":84978,"line_start":2457,"line_end":2457,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<&'a mut Decimal as std::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3261},"children":[],"decl_id":{"krate":2,"index":3263},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":85120,"byte_end":85130,"line_start":2463,"line_end":2463,"column_start":8,"column_end":18},"name":"div_assign","qualname":"<&'a mut Decimal as std::ops::DivAssign>::div_assign","value":"fn div_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3261},"children":[],"decl_id":{"krate":2,"index":3263},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":85252,"byte_end":85262,"line_start":2469,"line_end":2469,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<Decimal as std::ops::RemAssign>::rem_assign","value":"fn rem_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3265},"children":[],"decl_id":{"krate":2,"index":3267},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":85516,"byte_end":85526,"line_start":2479,"line_end":2479,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<Decimal as std::ops::RemAssign>::rem_assign","value":"fn rem_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3265},"children":[],"decl_id":{"krate":2,"index":3267},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":85668,"byte_end":85678,"line_start":2485,"line_end":2485,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<&'a mut Decimal as std::ops::RemAssign>::rem_assign","value":"fn rem_assign(&mut Self, Decimal)","parent":{"krate":2,"index":3265},"children":[],"decl_id":{"krate":2,"index":3267},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":85820,"byte_end":85830,"line_start":2491,"line_end":2491,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"<&'a mut Decimal as std::ops::RemAssign>::rem_assign","value":"fn rem_assign(&mut Self, &'a Decimal)","parent":{"krate":2,"index":3265},"children":[],"decl_id":{"krate":2,"index":3267},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":85966,"byte_end":85968,"line_start":2498,"line_end":2498,"column_start":8,"column_end":10},"name":"eq","qualname":"<Decimal as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &Decimal) -> bool","parent":{"krate":2,"index":2802},"children":[],"decl_id":{"krate":2,"index":2804},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":85949,"byte_end":85958,"line_start":2497,"line_end":2497,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86100,"byte_end":86104,"line_start":2506,"line_end":2506,"column_start":8,"column_end":12},"name":"hash","qualname":"<Decimal as std::hash::Hash>::hash","value":"fn hash<H>(&Self, &mut H) where H: Hasher","parent":{"krate":2,"index":10115},"children":[],"decl_id":{"krate":2,"index":10116},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86342,"byte_end":86353,"line_start":2517,"line_end":2517,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"<Decimal as std::cmp::PartialOrd>::partial_cmp","value":"fn partial_cmp(&Self, &Decimal) -> Option<Ordering>","parent":{"krate":2,"index":2848},"children":[],"decl_id":{"krate":2,"index":2850},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86325,"byte_end":86334,"line_start":2516,"line_end":2516,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86469,"byte_end":86472,"line_start":2523,"line_end":2523,"column_start":8,"column_end":11},"name":"cmp","qualname":"<Decimal as std::cmp::Ord>::cmp","value":"fn cmp(&Self, &Decimal) -> Ordering","parent":{"krate":2,"index":2838},"children":[],"decl_id":{"krate":2,"index":2839},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86585,"byte_end":86588,"line_start":2529,"line_end":2529,"column_start":8,"column_end":11},"name":"sum","qualname":"<Decimal as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Self where I: Iterator<Item = Decimal>","parent":{"krate":2,"index":7950},"children":[],"decl_id":{"krate":2,"index":7952},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86789,"byte_end":86792,"line_start":2539,"line_end":2539,"column_start":8,"column_end":11},"name":"sum","qualname":"<Decimal as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Self where I: Iterator<Item = &'a Decimal>","parent":{"krate":2,"index":7950},"children":[],"decl_id":{"krate":2,"index":7952},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1169},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87133,"byte_end":87144,"line_start":8,"line_end":8,"column_start":5,"column_end":16},"name":"ErrorString","qualname":"::error::Error::ErrorString","value":"Error::ErrorString(String)","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1171},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87145,"byte_end":87151,"line_start":8,"line_end":8,"column_start":17,"column_end":23},"name":"0","qualname":"::error::Error::ErrorString::0","value":"std::string::String","parent":{"krate":0,"index":1169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1172},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87158,"byte_end":87185,"line_start":9,"line_end":9,"column_start":5,"column_end":32},"name":"ExceedsMaximumPossibleValue","qualname":"::error::Error::ExceedsMaximumPossibleValue","value":"Error::ExceedsMaximumPossibleValue","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1174},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87191,"byte_end":87219,"line_start":10,"line_end":10,"column_start":5,"column_end":33},"name":"LessThanMinimumPossibleValue","qualname":"::error::Error::LessThanMinimumPossibleValue","value":"Error::LessThanMinimumPossibleValue","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1176},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87225,"byte_end":87234,"line_start":11,"line_end":11,"column_start":5,"column_end":14},"name":"Underflow","qualname":"::error::Error::Underflow","value":"Error::Underflow","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1178},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87240,"byte_end":87268,"line_start":12,"line_end":12,"column_start":5,"column_end":33},"name":"ScaleExceedsMaximumPrecision","qualname":"::error::Error::ScaleExceedsMaximumPrecision","value":"Error::ScaleExceedsMaximumPrecision(u32)","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1180},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87269,"byte_end":87272,"line_start":12,"line_end":12,"column_start":34,"column_end":37},"name":"0","qualname":"::error::Error::ScaleExceedsMaximumPrecision::0","value":"u32","parent":{"krate":0,"index":1178},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1181},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87279,"byte_end":87291,"line_start":13,"line_end":13,"column_start":5,"column_end":17},"name":"ConversionTo","qualname":"::error::Error::ConversionTo","value":"Error::ConversionTo(String)","parent":{"krate":0,"index":1168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1183},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87292,"byte_end":87298,"line_start":13,"line_end":13,"column_start":18,"column_end":24},"name":"0","qualname":"::error::Error::ConversionTo::0","value":"std::string::String","parent":{"krate":0,"index":1181},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1168},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87121,"byte_end":87126,"line_start":7,"line_end":7,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"enum Error {\n    ErrorString(String),\n    ExceedsMaximumPossibleValue,\n    LessThanMinimumPossibleValue,\n    Underflow,\n    ScaleExceedsMaximumPrecision(u32),\n    ConversionTo(String),\n}","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1172},{"krate":0,"index":1174},{"krate":0,"index":1176},{"krate":0,"index":1178},{"krate":0,"index":1181}],"decl_id":null,"docs":" Error type for the library.\n","sig":null,"attributes":[{"value":"/ Error type for the library.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87045,"byte_end":87076,"line_start":5,"line_end":5,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87380,"byte_end":87384,"line_start":21,"line_end":21,"column_start":8,"column_end":12},"name":"from","qualname":"<Error as std::convert::From>::from","value":"fn from(S) -> Self","parent":{"krate":2,"index":3056},"children":[],"decl_id":{"krate":2,"index":3058},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87363,"byte_end":87372,"line_start":20,"line_end":20,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87655,"byte_end":87658,"line_start":35,"line_end":35,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Error as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9909},"children":[],"decl_id":{"krate":2,"index":9910},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":202117,"byte_end":202128,"line_start":78,"line_end":78,"column_start":9,"column_end":20},"name":"checked_add","qualname":"<Decimal>::checked_add","value":"fn checked_add(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked addition. Computes `self + other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":200674,"byte_end":200691,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":200700,"byte_end":200711,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1205},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":202156,"byte_end":202170,"line_start":80,"line_end":80,"column_start":9,"column_end":23},"name":"saturating_add","qualname":"<Decimal>::saturating_add","value":"fn saturating_add(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":"Saturating addition. Computes `self + other`, saturating at the relevant upper or lower boundary.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":201290,"byte_end":201307,"line_start":41,"line_end":41,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":201316,"byte_end":201327,"line_start":42,"line_end":42,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":202294,"byte_end":202305,"line_start":86,"line_end":86,"column_start":9,"column_end":20},"name":"checked_mul","qualname":"<Decimal>::checked_mul","value":"fn checked_mul(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked multiplication. Computes `self * other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":200674,"byte_end":200691,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":200700,"byte_end":200711,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1207},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":202333,"byte_end":202347,"line_start":88,"line_end":88,"column_start":9,"column_end":23},"name":"saturating_mul","qualname":"<Decimal>::saturating_mul","value":"fn saturating_mul(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":"Saturating multiplication. Computes `self * other`, saturating at the relevant upper or lower boundary.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":201290,"byte_end":201307,"line_start":41,"line_end":41,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":201316,"byte_end":201327,"line_start":42,"line_end":42,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":202459,"byte_end":202470,"line_start":94,"line_end":94,"column_start":9,"column_end":20},"name":"checked_sub","qualname":"<Decimal>::checked_sub","value":"fn checked_sub(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked subtraction. Computes `self - other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":200674,"byte_end":200691,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":200700,"byte_end":200711,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":202498,"byte_end":202512,"line_start":96,"line_end":96,"column_start":9,"column_end":23},"name":"saturating_sub","qualname":"<Decimal>::saturating_sub","value":"fn saturating_sub(Self, Decimal) -> Decimal","parent":null,"children":[],"decl_id":null,"docs":"Saturating subtraction. Computes `self - other`, saturating at the relevant upper or lower boundary.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":201290,"byte_end":201307,"line_start":41,"line_end":41,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":201316,"byte_end":201327,"line_start":42,"line_end":42,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":202591,"byte_end":202602,"line_start":100,"line_end":100,"column_start":36,"column_end":47},"name":"checked_div","qualname":"<Decimal>::checked_div","value":"fn checked_div(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked division. Computes `self / other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":200674,"byte_end":200691,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":200700,"byte_end":200711,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":202651,"byte_end":202662,"line_start":101,"line_end":101,"column_start":37,"column_end":48},"name":"checked_rem","qualname":"<Decimal>::checked_rem","value":"fn checked_rem(Self, Decimal) -> Option<Decimal>","parent":null,"children":[],"decl_id":null,"docs":"Checked remainder. Computes `self % other`, returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":200674,"byte_end":200691,"line_start":20,"line_end":20,"column_start":9,"column_end":26}},{"value":"must_use","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":200700,"byte_end":200711,"line_start":21,"line_end":21,"column_start":9,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203970,"byte_end":203973,"line_start":153,"line_end":153,"column_start":42,"column_end":45},"name":"add","qualname":"<Decimal as std::ops::Add>::add","value":"fn add(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203793,"byte_end":203802,"line_start":145,"line_end":145,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1218},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203970,"byte_end":203973,"line_start":153,"line_end":153,"column_start":42,"column_end":45},"name":"add","qualname":"<&'a Decimal as std::ops::Add>::add","value":"fn add(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203174,"byte_end":203183,"line_start":119,"line_end":119,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203970,"byte_end":203973,"line_start":153,"line_end":153,"column_start":42,"column_end":45},"name":"add","qualname":"<Decimal as std::ops::Add>::add","value":"fn add(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203486,"byte_end":203495,"line_start":132,"line_end":132,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204081,"byte_end":204084,"line_start":158,"line_end":158,"column_start":8,"column_end":11},"name":"add","qualname":"<&'a Decimal as std::ops::Add>::add","value":"fn add(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3218},"children":[],"decl_id":{"krate":2,"index":3221},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204056,"byte_end":204073,"line_start":157,"line_end":157,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204329,"byte_end":204340,"line_start":168,"line_end":168,"column_start":8,"column_end":19},"name":"checked_add","qualname":"<Decimal as num_traits::CheckedAdd>::checked_add","value":"fn checked_add(&Self, &Decimal) -> Option<Decimal>","parent":{"krate":20,"index":572},"children":[],"decl_id":{"krate":20,"index":573},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204312,"byte_end":204321,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204482,"byte_end":204493,"line_start":175,"line_end":175,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"<Decimal as num_traits::CheckedSub>::checked_sub","value":"fn checked_sub(&Self, &Decimal) -> Option<Decimal>","parent":{"krate":20,"index":575},"children":[],"decl_id":{"krate":20,"index":576},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204465,"byte_end":204474,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204635,"byte_end":204646,"line_start":182,"line_end":182,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"<Decimal as num_traits::CheckedMul>::checked_mul","value":"fn checked_mul(&Self, &Decimal) -> Option<Decimal>","parent":{"krate":20,"index":577},"children":[],"decl_id":{"krate":20,"index":578},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204618,"byte_end":204627,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204788,"byte_end":204799,"line_start":189,"line_end":189,"column_start":8,"column_end":19},"name":"checked_div","qualname":"<Decimal as num_traits::CheckedDiv>::checked_div","value":"fn checked_div(&Self, &Decimal) -> Option<Decimal>","parent":{"krate":20,"index":579},"children":[],"decl_id":{"krate":20,"index":580},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204771,"byte_end":204780,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204941,"byte_end":204952,"line_start":196,"line_end":196,"column_start":8,"column_end":19},"name":"checked_rem","qualname":"<Decimal as num_traits::CheckedRem>::checked_rem","value":"fn checked_rem(&Self, &Decimal) -> Option<Decimal>","parent":{"krate":20,"index":581},"children":[],"decl_id":{"krate":20,"index":582},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204924,"byte_end":204933,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205112,"byte_end":205115,"line_start":205,"line_end":205,"column_start":8,"column_end":11},"name":"inv","qualname":"<Decimal as num_traits::Inv>::inv","value":"fn inv(Self) -> Self","parent":{"krate":20,"index":618},"children":[],"decl_id":{"krate":20,"index":620},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205095,"byte_end":205104,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205210,"byte_end":205213,"line_start":210,"line_end":210,"column_start":42,"column_end":45},"name":"div","qualname":"<Decimal as std::ops::Div>::div","value":"fn div(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3233},"children":[],"decl_id":{"krate":2,"index":3236},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203793,"byte_end":203802,"line_start":145,"line_end":145,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205210,"byte_end":205213,"line_start":210,"line_end":210,"column_start":42,"column_end":45},"name":"div","qualname":"<&'a Decimal as std::ops::Div>::div","value":"fn div(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3233},"children":[],"decl_id":{"krate":2,"index":3236},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203174,"byte_end":203183,"line_start":119,"line_end":119,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1233},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205210,"byte_end":205213,"line_start":210,"line_end":210,"column_start":42,"column_end":45},"name":"div","qualname":"<Decimal as std::ops::Div>::div","value":"fn div(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3233},"children":[],"decl_id":{"krate":2,"index":3236},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203486,"byte_end":203495,"line_start":132,"line_end":132,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205313,"byte_end":205316,"line_start":215,"line_end":215,"column_start":8,"column_end":11},"name":"div","qualname":"<&'a Decimal as std::ops::Div>::div","value":"fn div(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3233},"children":[],"decl_id":{"krate":2,"index":3236},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205296,"byte_end":205305,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205651,"byte_end":205654,"line_start":224,"line_end":224,"column_start":42,"column_end":45},"name":"mul","qualname":"<Decimal as std::ops::Mul>::mul","value":"fn mul(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3228},"children":[],"decl_id":{"krate":2,"index":3231},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203793,"byte_end":203802,"line_start":145,"line_end":145,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205651,"byte_end":205654,"line_start":224,"line_end":224,"column_start":42,"column_end":45},"name":"mul","qualname":"<&'a Decimal as std::ops::Mul>::mul","value":"fn mul(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3228},"children":[],"decl_id":{"krate":2,"index":3231},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203174,"byte_end":203183,"line_start":119,"line_end":119,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205651,"byte_end":205654,"line_start":224,"line_end":224,"column_start":42,"column_end":45},"name":"mul","qualname":"<Decimal as std::ops::Mul>::mul","value":"fn mul(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3228},"children":[],"decl_id":{"krate":2,"index":3231},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203486,"byte_end":203495,"line_start":132,"line_end":132,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205754,"byte_end":205757,"line_start":229,"line_end":229,"column_start":8,"column_end":11},"name":"mul","qualname":"<&'a Decimal as std::ops::Mul>::mul","value":"fn mul(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3228},"children":[],"decl_id":{"krate":2,"index":3231},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205737,"byte_end":205746,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":206000,"byte_end":206003,"line_start":237,"line_end":237,"column_start":42,"column_end":45},"name":"rem","qualname":"<Decimal as std::ops::Rem>::rem","value":"fn rem(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3239},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203793,"byte_end":203802,"line_start":145,"line_end":145,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":206000,"byte_end":206003,"line_start":237,"line_end":237,"column_start":42,"column_end":45},"name":"rem","qualname":"<&'a Decimal as std::ops::Rem>::rem","value":"fn rem(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3239},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203174,"byte_end":203183,"line_start":119,"line_end":119,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":206000,"byte_end":206003,"line_start":237,"line_end":237,"column_start":42,"column_end":45},"name":"rem","qualname":"<Decimal as std::ops::Rem>::rem","value":"fn rem(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3239},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203486,"byte_end":203495,"line_start":132,"line_end":132,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":206103,"byte_end":206106,"line_start":242,"line_end":242,"column_start":8,"column_end":11},"name":"rem","qualname":"<&'a Decimal as std::ops::Rem>::rem","value":"fn rem(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3239},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":206086,"byte_end":206095,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":206439,"byte_end":206442,"line_start":251,"line_end":251,"column_start":42,"column_end":45},"name":"sub","qualname":"<Decimal as std::ops::Sub>::sub","value":"fn sub(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203793,"byte_end":203802,"line_start":145,"line_end":145,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":206439,"byte_end":206442,"line_start":251,"line_end":251,"column_start":42,"column_end":45},"name":"sub","qualname":"<&'a Decimal as std::ops::Sub>::sub","value":"fn sub(Self, Decimal) -> Decimal","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203174,"byte_end":203183,"line_start":119,"line_end":119,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":206439,"byte_end":206442,"line_start":251,"line_end":251,"column_start":42,"column_end":45},"name":"sub","qualname":"<Decimal as std::ops::Sub>::sub","value":"fn sub(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":203486,"byte_end":203495,"line_start":132,"line_end":132,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":206550,"byte_end":206553,"line_start":256,"line_end":256,"column_start":8,"column_end":11},"name":"sub","qualname":"<&'a Decimal as std::ops::Sub>::sub","value":"fn sub(Self, &Decimal) -> Decimal","parent":{"krate":2,"index":3223},"children":[],"decl_id":{"krate":2,"index":3226},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":206525,"byte_end":206542,"line_start":255,"line_end":255,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/serde.rs","byte_start":213304,"byte_end":213315,"line_start":129,"line_end":129,"column_start":8,"column_end":19},"name":"deserialize","qualname":"<Decimal as serde::Deserialize>::deserialize","value":"fn deserialize<D>(D) -> Result<Decimal, D::Error> where\nD: serde::de::Deserializer","parent":{"krate":22,"index":1576},"children":[],"decl_id":{"krate":22,"index":1578},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/serde.rs","byte_start":218256,"byte_end":218265,"line_start":293,"line_end":293,"column_start":8,"column_end":17},"name":"serialize","qualname":"<Decimal as serde::Serialize>::serialize","value":"fn serialize<S>(&Self, S) -> Result<S::Ok, S::Error> where\nS: serde::Serializer","parent":{"krate":22,"index":2117},"children":[],"decl_id":{"krate":22,"index":2118},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":990},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1348,"byte_end":1355,"line_start":57,"line_end":57,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":995},{"krate":0,"index":998},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1005},{"krate":0,"index":1008},{"krate":0,"index":1011},{"krate":0,"index":1014}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use rust_decimal::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use rust_decimal::prelude::*;`).","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1251,"byte_end":1339,"line_start":56,"line_end":56,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":1017},"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1789,"byte_end":1795,"line_start":71,"line_end":71,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"core::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Shortcut for `core::result::Result<T, rust_decimal::Error>`. Useful to distinguish\n between `rust_decimal` and `std` types.\n","sig":null,"attributes":[{"value":"/ Shortcut for `core::result::Result<T, rust_decimal::Error>`. Useful to distinguish","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1649,"byte_end":1735,"line_start":69,"line_end":69,"column_start":1,"column_end":87}},{"value":"/ between `rust_decimal` and `std` types.","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/lib.rs","byte_start":1736,"byte_end":1779,"line_start":70,"line_end":70,"column_start":1,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9919,"byte_end":9926,"line_start":172,"line_end":172,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":221},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61914,"byte_end":61921,"line_start":1690,"line_end":1690,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":65951,"byte_end":65958,"line_start":1812,"line_end":1812,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66085,"byte_end":66092,"line_start":1822,"line_end":1822,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66158,"byte_end":66165,"line_start":1828,"line_end":1828,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66797,"byte_end":66804,"line_start":1862,"line_end":1862,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66998,"byte_end":67005,"line_start":1870,"line_end":1870,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":67170,"byte_end":67177,"line_start":1878,"line_end":1878,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":78110,"byte_end":78117,"line_start":2217,"line_end":2217,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81012,"byte_end":81019,"line_start":2303,"line_end":2303,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81508,"byte_end":81515,"line_start":2315,"line_end":2315,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81655,"byte_end":81662,"line_start":2321,"line_end":2321,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81818,"byte_end":81825,"line_start":2327,"line_end":2327,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81971,"byte_end":81978,"line_start":2333,"line_end":2333,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":82435,"byte_end":82442,"line_start":2356,"line_end":2356,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":82699,"byte_end":82706,"line_start":2366,"line_end":2366,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":83135,"byte_end":83142,"line_start":2384,"line_end":2384,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":83399,"byte_end":83406,"line_start":2394,"line_end":2394,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":83835,"byte_end":83842,"line_start":2412,"line_end":2412,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":84099,"byte_end":84106,"line_start":2422,"line_end":2422,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":84535,"byte_end":84542,"line_start":2440,"line_end":2440,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":84799,"byte_end":84806,"line_start":2450,"line_end":2450,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":85235,"byte_end":85242,"line_start":2468,"line_end":2468,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":85499,"byte_end":85506,"line_start":2478,"line_end":2478,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":85935,"byte_end":85942,"line_start":2496,"line_end":2496,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86057,"byte_end":86064,"line_start":2503,"line_end":2503,"column_start":13,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86083,"byte_end":86090,"line_start":2505,"line_end":2505,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86311,"byte_end":86318,"line_start":2515,"line_end":2515,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86452,"byte_end":86459,"line_start":2522,"line_end":2522,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86568,"byte_end":86575,"line_start":2528,"line_end":2528,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86772,"byte_end":86779,"line_start":2538,"line_end":2538,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87324,"byte_end":87329,"line_start":16,"line_end":16,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87608,"byte_end":87613,"line_start":32,"line_end":32,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87640,"byte_end":87645,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/ops/common.rs","byte_start":116670,"byte_end":116675,"line_start":9,"line_end":9,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/ops/common.rs","byte_start":122045,"byte_end":122050,"line_start":191,"line_end":191,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/ops/common.rs","byte_start":123211,"byte_end":123216,"line_start":240,"line_end":240,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/ops/common.rs","byte_start":124098,"byte_end":124103,"line_start":278,"line_end":278,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/ops/div.rs","byte_start":130324,"byte_end":130329,"line_start":8,"line_end":8,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/ops/div.rs","byte_start":132568,"byte_end":132573,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":202032,"byte_end":202039,"line_start":74,"line_end":74,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204298,"byte_end":204305,"line_start":166,"line_end":166,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204451,"byte_end":204458,"line_start":173,"line_end":173,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204604,"byte_end":204611,"line_start":180,"line_end":180,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204757,"byte_end":204764,"line_start":187,"line_end":187,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204910,"byte_end":204917,"line_start":194,"line_end":194,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205056,"byte_end":205063,"line_start":201,"line_end":201,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":908},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/serde.rs","byte_start":213287,"byte_end":213294,"line_start":128,"line_end":128,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/serde.rs","byte_start":214356,"byte_end":214370,"line_start":163,"line_end":163,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/serde.rs","byte_start":218239,"byte_end":218246,"line_start":292,"line_end":292,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":9919,"byte_end":9926,"line_start":172,"line_end":172,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":61914,"byte_end":61921,"line_start":1690,"line_end":1690,"column_start":18,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3128}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":65951,"byte_end":65958,"line_start":1812,"line_end":1812,"column_start":15,"column_end":22},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":466}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66085,"byte_end":66092,"line_start":1822,"line_end":1822,"column_start":14,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":476}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66158,"byte_end":66165,"line_start":1828,"line_end":1828,"column_start":17,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":819}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66797,"byte_end":66804,"line_start":1862,"line_end":1862,"column_start":14,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":844}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":66998,"byte_end":67005,"line_start":1870,"line_end":1870,"column_start":18,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":12556}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":67170,"byte_end":67177,"line_start":1878,"line_end":1878,"column_start":24,"column_end":31},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":333}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":78110,"byte_end":78117,"line_start":2217,"line_end":2217,"column_start":22,"column_end":29},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":307}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81012,"byte_end":81019,"line_start":2303,"line_end":2303,"column_start":23,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":9909}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81508,"byte_end":81515,"line_start":2315,"line_end":2315,"column_start":21,"column_end":28},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":9902}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81655,"byte_end":81662,"line_start":2321,"line_end":2321,"column_start":24,"column_end":31},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":9921}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81818,"byte_end":81825,"line_start":2327,"line_end":2327,"column_start":24,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":9923}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":81971,"byte_end":81978,"line_start":2333,"line_end":2333,"column_start":14,"column_end":21},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3245}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":82435,"byte_end":82442,"line_start":2356,"line_end":2356,"column_start":20,"column_end":27},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3249}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":82699,"byte_end":82706,"line_start":2366,"line_end":2366,"column_start":37,"column_end":44},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3249}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":83135,"byte_end":83142,"line_start":2384,"line_end":2384,"column_start":20,"column_end":27},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3253}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":83399,"byte_end":83406,"line_start":2394,"line_end":2394,"column_start":37,"column_end":44},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3253}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":83835,"byte_end":83842,"line_start":2412,"line_end":2412,"column_start":20,"column_end":27},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3257}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":84099,"byte_end":84106,"line_start":2422,"line_end":2422,"column_start":37,"column_end":44},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3257}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":84535,"byte_end":84542,"line_start":2440,"line_end":2440,"column_start":20,"column_end":27},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3261}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":84799,"byte_end":84806,"line_start":2450,"line_end":2450,"column_start":37,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3261}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":85235,"byte_end":85242,"line_start":2468,"line_end":2468,"column_start":20,"column_end":27},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3265}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":85499,"byte_end":85506,"line_start":2478,"line_end":2478,"column_start":37,"column_end":44},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3265}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":85935,"byte_end":85942,"line_start":2496,"line_end":2496,"column_start":20,"column_end":27},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":2802}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86057,"byte_end":86064,"line_start":2503,"line_end":2503,"column_start":13,"column_end":20},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":2807}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86083,"byte_end":86090,"line_start":2505,"line_end":2505,"column_start":15,"column_end":22},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":10115}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86311,"byte_end":86318,"line_start":2515,"line_end":2515,"column_start":21,"column_end":28},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":2848}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86452,"byte_end":86459,"line_start":2522,"line_end":2522,"column_start":14,"column_end":21},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":2838}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86568,"byte_end":86575,"line_start":2528,"line_end":2528,"column_start":14,"column_end":21},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":7950}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/decimal.rs","byte_start":86772,"byte_end":86779,"line_start":2538,"line_end":2538,"column_start":31,"column_end":38},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":7950}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87324,"byte_end":87329,"line_start":16,"line_end":16,"column_start":21,"column_end":26},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1168},"to":{"krate":2,"index":3056}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87608,"byte_end":87613,"line_start":32,"line_end":32,"column_start":28,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1168},"to":{"krate":1,"index":2555}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/error.rs","byte_start":87640,"byte_end":87645,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1168},"to":{"krate":2,"index":9909}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/ops/common.rs","byte_start":116670,"byte_end":116675,"line_start":9,"line_end":9,"column_start":6,"column_end":11},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/ops/common.rs","byte_start":122045,"byte_end":122050,"line_start":191,"line_end":191,"column_start":6,"column_end":11},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":531},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/ops/common.rs","byte_start":123211,"byte_end":123216,"line_start":240,"line_end":240,"column_start":6,"column_end":11},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/ops/common.rs","byte_start":124098,"byte_end":124103,"line_start":278,"line_end":278,"column_start":6,"column_end":11},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/ops/div.rs","byte_start":130324,"byte_end":130329,"line_start":8,"line_end":8,"column_start":6,"column_end":11},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/ops/div.rs","byte_start":132568,"byte_end":132573,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":202032,"byte_end":202039,"line_start":74,"line_end":74,"column_start":6,"column_end":13},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204298,"byte_end":204305,"line_start":166,"line_end":166,"column_start":21,"column_end":28},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":572}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204451,"byte_end":204458,"line_start":173,"line_end":173,"column_start":21,"column_end":28},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":575}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204604,"byte_end":204611,"line_start":180,"line_end":180,"column_start":21,"column_end":28},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":577}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204757,"byte_end":204764,"line_start":187,"line_end":187,"column_start":21,"column_end":28},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":579}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":204910,"byte_end":204917,"line_start":194,"line_end":194,"column_start":21,"column_end":28},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":581}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/arithmetic_impls.rs","byte_start":205056,"byte_end":205063,"line_start":201,"line_end":201,"column_start":14,"column_end":21},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1034},"to":{"krate":20,"index":618}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/serde.rs","byte_start":213287,"byte_end":213294,"line_start":128,"line_end":128,"column_start":39,"column_end":46},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1034},"to":{"krate":22,"index":1576}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/serde.rs","byte_start":214356,"byte_end":214370,"line_start":163,"line_end":163,"column_start":39,"column_end":53},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":960},"to":{"krate":22,"index":1662}},{"span":{"file_name":"/Users/zevkent/.cargo/registry/src/github.com-1ecc6299db9ec823/rust_decimal-1.25.0/src/serde.rs","byte_start":218239,"byte_end":218246,"line_start":292,"line_end":292,"column_start":27,"column_end":34},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1034},"to":{"krate":22,"index":2117}}]}